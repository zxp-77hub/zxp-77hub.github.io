<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>通用功能攻略 on 菜鸟集市</title>
    <link>https://zxp-77hub.github.io/docs/common/</link>
    <description>Recent content in 通用功能攻略 on 菜鸟集市</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Wed, 07 Jul 2021 10:06:36 +0800</lastBuildDate><atom:link href="https://zxp-77hub.github.io/docs/common/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>GQL</title>
      <link>https://zxp-77hub.github.io/docs/common/gql/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zxp-77hub.github.io/docs/common/gql/</guid>
      <description>普通的gql #  最简单的，直接查一个对象（表）的全部数据
{ BudgetAccount{ id name accountType { id name } } } 加一点查询条件
{ BudgetAccount(criteriaStr:&amp;quot;name in (&#39;1&#39;,&#39;2&#39;,&#39;3&#39;)&amp;quot;){ id name accountType { id name } } } 这个会查到name为1、2、3的多条数据
高级的gql #  上面只能查到一个表的数据及其关联的外键，子表的数据。下面来搞一个子查询。
 因为有的时候，后端的模型中，没有包含我们需要的子表，只能我们自己构建
 { BudgetAccount(criteriaStr:&amp;quot;&amp;quot;){ a: exprField(expr:&amp;quot;()&amp;quot;) b: exprField(expr:&amp;quot;()&amp;quot;) } } 其中a:是个模型上的一个字段起别名，exprField是一个可以扩展的额外字段，利用这两个就可以做成子查询了。
举个例子。对于预算指标，复合指标有若干个子指标，但是直接通过BudgetIndicator模型获取不到它们。就可以这样做
{ BudgetIndicator(criteriaStr:&amp;quot;isComposite=true&amp;quot;){ id isComposite child: exprField(expr:&amp;quot;(select string_agg(CONCAT_WS(&#39;,&#39;,childIndicator.id,childIndicator.name),&#39;;&#39;) from BudgetIndicatorComposition where parentIndicatorId=m.id)&amp;quot;) } } 这里使用了两个sql函数把多条记录、多个字段组合成了一个字符串。拿到数据后前端经过简单的split转化就可以拿到json对象了。
常用的sql函数 #  string_agg: 如果查出来有多条结果，会将它们拼装为一个字符串
例子：string_agg(object.name, &#39;, &#39;)
coalesce：如果alias存在则取alias，不存在取name</description>
    </item>
    
    <item>
      <title>线上调试</title>
      <link>https://zxp-77hub.github.io/docs/common/%E7%BA%BF%E4%B8%8A%E8%B0%83%E8%AF%95/</link>
      <pubDate>Wed, 07 Jul 2021 10:06:36 +0800</pubDate>
      
      <guid>https://zxp-77hub.github.io/docs/common/%E7%BA%BF%E4%B8%8A%E8%B0%83%E8%AF%95/</guid>
      <description>线上系统的url后面加?ui-test=t可以让系统加载source map</description>
    </item>
    
    <item>
      <title>EntityDataTree</title>
      <link>https://zxp-77hub.github.io/docs/common/entitydatatree/</link>
      <pubDate>Tue, 29 Jun 2021 13:41:36 +0800</pubDate>
      
      <guid>https://zxp-77hub.github.io/docs/common/entitydatatree/</guid>
      <description>寻找自定义该组件中的gql的方法 #  预算项目列表中的左树用了CustomerCategory组件，它又用了CategoryTree组件，其中又用了EntityDataTree组件，其中又用到了CommonProvider类，最终的gql就是在CommonProvider中生成并使用的。
return client .query&amp;lt;{ data: T[] }&amp;gt;({ query: `query{ data: ${queryBuilder.toString()} }` }) </description>
    </item>
    
    <item>
      <title>GridRowAction的popover</title>
      <link>https://zxp-77hub.github.io/docs/common/gridrowaction%E7%9A%84popover/</link>
      <pubDate>Thu, 01 Apr 2021 18:45:12 +0800</pubDate>
      
      <guid>https://zxp-77hub.github.io/docs/common/gridrowaction%E7%9A%84popover/</guid>
      <description>多列表方案中
getRowActions(rowIndex: number, data: any): IGridAction[] { const actions = this.presenter.listSolutionConnector.rowActionController.makeDefaultRowActions( data, ); const disabledTimeAction = { icon: &amp;#39;icontuichu&amp;#39;, title: &amp;#39;停用日期&amp;#39;, key: &amp;#39;disabledDate&amp;#39;, onClick: () =&amp;gt; {}, popoverRender: () =&amp;gt; { return { content: ( &amp;lt;div /&amp;gt; ), }; }, } } </description>
    </item>
    
    <item>
      <title>提示</title>
      <link>https://zxp-77hub.github.io/docs/common/%E6%8F%90%E7%A4%BA/</link>
      <pubDate>Mon, 22 Mar 2021 17:37:07 +0800</pubDate>
      
      <guid>https://zxp-77hub.github.io/docs/common/%E6%8F%90%E7%A4%BA/</guid>
      <description>import { showError, showInfo, showSuccess } from &amp;#39;@root/common/toaster&amp;#39;; showSuccess(&amp;#39;text&amp;#39;) 自适应内容高度的提示
// apps/link/src/main/screens/projects/budget/budget-account/presenter/budget-account-form-presenter/helper.tsx  AlphaWarning( &amp;#39;text&amp;#39;, () =&amp;gt; {}, () =&amp;gt; {}, ); </description>
    </item>
    
    <item>
      <title>币种精度</title>
      <link>https://zxp-77hub.github.io/docs/common/%E5%B8%81%E7%A7%8D%E7%B2%BE%E5%BA%A6/</link>
      <pubDate>Wed, 17 Mar 2021 11:53:41 +0800</pubDate>
      
      <guid>https://zxp-77hub.github.io/docs/common/%E5%B8%81%E7%A7%8D%E7%B2%BE%E5%BA%A6/</guid>
      <description>import { store } from &amp;#39;@models&amp;#39;; // 表单中(EasyBizFormPresenter) this.localCurrency.precision // 不在EasyBizFormPresenter中 store.exchangeDefManager.getLocalCurrency().precision </description>
    </item>
    
    <item>
      <title>全貌统计加指标</title>
      <link>https://zxp-77hub.github.io/docs/common/%E5%85%A8%E8%B2%8C%E7%BB%9F%E8%AE%A1%E5%8A%A0%E6%8C%87%E6%A0%87/</link>
      <pubDate>Tue, 16 Mar 2021 11:27:50 +0800</pubDate>
      
      <guid>https://zxp-77hub.github.io/docs/common/%E5%85%A8%E8%B2%8C%E7%BB%9F%E8%AE%A1%E5%8A%A0%E6%8C%87%E6%A0%87/</guid>
      <description>https://shimo.im/sheets/16q8MDar7Ktv0mk7/cayv7，所有的指标会在这个文档里说明。其中【指标编码】是下文中提到的 MeasureId 。
需要现在go上配置好指标，然后在前端中获取指标并进行设置。
go #   trek/services/dashboard/config/project-overview.go addProjectStatisticsConfig函数 addConfig  // 多值指标 addConfig(&amp;amp;dashboard.EvaluateCardConfig{ Id: &amp;#34;projectTimeStatisticCost&amp;#34;, Title: &amp;#34;工时成本&amp;#34;, Icon: &amp;#34;icongongshi1&amp;#34;, ViewType: dashboard.CardViewType_MultiValue, ValueConfig: []dashboard.EvaluateValueConfig{ { Id: &amp;#34;workingTimeCost&amp;#34;, Icon: &amp;#34;iconzonggongshi&amp;#34;, Title: &amp;#34;总工时成本&amp;#34;, MeasureId: &amp;#34;workingTimeCost&amp;#34;, Unit: dashboard.CardViewUnit_TenThounsand, ClassName: &amp;#34;color1&amp;#34;, SupportPenetrate: true, IsAmount: true, ValuePeriodType: dashboard.MeasurePeriodValueTypeOccurs, }, } }) // 单值指标 addConfig(&amp;amp;dashboard.EvaluateCardConfig{ Id: &amp;#34;workingTimeCost&amp;#34;, Title: &amp;#34;总工时成本&amp;#34;, Icon: &amp;#34;&amp;#34;, ViewType: dashboard.CardViewType_SingleValue, ValueConfig: dashboard.EvaluateValueConfig{ Id: &amp;#34;count&amp;#34;, Icon: &amp;#34;iconzonggongshi&amp;#34;, Title: &amp;#34;总工时成本&amp;#34;, MeasureId: &amp;#34;workingTimeCost&amp;#34;, Unit: dashboard.CardViewUnit_TenThounsand, IsAmount: true, ClassName: &amp;#34;color1&amp;#34;, SupportPenetrate: true, ValuePeriodType: dashboard.</description>
    </item>
    
    <item>
      <title>模块启用</title>
      <link>https://zxp-77hub.github.io/docs/common/%E6%A8%A1%E5%9D%97%E5%90%AF%E7%94%A8/</link>
      <pubDate>Thu, 11 Mar 2021 11:01:34 +0800</pubDate>
      
      <guid>https://zxp-77hub.github.io/docs/common/%E6%A8%A1%E5%9D%97%E5%90%AF%E7%94%A8/</guid>
      <description>go #  go项目，获取功能权限是否开启
b := ctx.GetBusinessModuleById(gen_ec.EC_BusinessModule_BusinessModule_budget) // b.IsEnabled 前端 #  import { store } from &amp;#39;@models&amp;#39;; class A { b() { const contractModel = store.moduleInitManager.getModuleById(&amp;#39;BusinessModule_contract&amp;#39;); if ( !contractModel || !contractModel.isEnabled ) { // ...  } } } </description>
    </item>
    
    <item>
      <title>Gen</title>
      <link>https://zxp-77hub.github.io/docs/common/gen/</link>
      <pubDate>Wed, 10 Mar 2021 17:41:36 +0800</pubDate>
      
      <guid>https://zxp-77hub.github.io/docs/common/gen/</guid>
      <description>http://172.31.23.98:8080/job/front-gen/
gen:
 在app/go-gen中修改main/index.go中的ApiHost变量为你环境的host，运行gen.sh； 提交代码，部署trek到目标环境； 在jinkens的front-gen中，左边的Build with Parameters生成目标分支、目标环境的web的gen； 获取PR地址，修改remote分支，默认是master，合并代码  问题 #   某些变量在本地跑完gen后不见了  可能是后端该了某些属性的名字，但是0租户没有同步。    </description>
    </item>
    
    <item>
      <title>获取系统参数</title>
      <link>https://zxp-77hub.github.io/docs/common/%E8%8E%B7%E5%8F%96%E7%B3%BB%E7%BB%9F%E5%8F%82%E6%95%B0/</link>
      <pubDate>Tue, 09 Mar 2021 15:48:33 +0800</pubDate>
      
      <guid>https://zxp-77hub.github.io/docs/common/%E8%8E%B7%E5%8F%96%E7%B3%BB%E7%BB%9F%E5%8F%82%E6%95%B0/</guid>
      <description>一 #  先在go上设置需要得系统参数，然后在前端取用。 参考：
 trek/services/form-services/middlewares/entities/time-sheet/index.go apps/link/src/main/screens/projects/time-sheet/form/TimeSheetFormPresenter.tsx  // 这里定义需要查询的系统参数 form_service_middlewares_creators.AppendSystemSettingKeyMiddlewareCreator( form_service_middlewares_creators.AppendSystemSettingKeyParams{ Keys: []string{ gen_ec.EC_Setting_timsheetWeekStarts, gen_ec.EC_Setting_timesheetPrecision, gen_ec.EC_Setting_timsheetDay2Hour, gen_ec.EC_Setting_timesheetCostRateType, gen_ec.EC_Setting_priceScale, }, }, ), this.bizFormPresenter.api.getSystemSetting(&amp;#39;timesheetCostRateType&amp;#39;); 二 #  const key = &amp;#39;timesheetCostRateType&amp;#39;; // 参数名 const settingDataLoader = new DataLoader(EN_Setting, [&amp;#39;values.value&amp;#39;], { criteriaStr: `key=&amp;#39;${key}&amp;#39;`, } as QueryOptions); const data = await settingDataLoader.query(); const result = data[0]; // result.value就是该参数的值  </description>
    </item>
    
    <item>
      <title>获取业务规则</title>
      <link>https://zxp-77hub.github.io/docs/common/%E4%B8%9A%E5%8A%A1%E8%A7%84%E5%88%99/</link>
      <pubDate>Tue, 05 Jan 2021 17:48:57 +0800</pubDate>
      
      <guid>https://zxp-77hub.github.io/docs/common/%E4%B8%9A%E5%8A%A1%E8%A7%84%E5%88%99/</guid>
      <description>方式一 #  class ProjectFormPresenter extends EasyBizFormPresenter&amp;lt;IProject&amp;gt;{ private billTypeRules: Array&amp;lt;IBizProcessFuncUnitSetting&amp;gt; = []; xx() { const businessRules = this.bizFormPresenter.api.getBusinessRules() this.billTypeRules = oc(businessRules).rules([]) } } 方式二 #  import { FuncUnit_Constants } from &amp;#39;@q7/athena-gen/src&amp;#39;; class ProjectPlanButton extends MenuButton { private checkEnableProjectRule = () =&amp;gt; { const enableProject: IBizProcessFuncUnitSetting = this.presenter.api.getBusinessRuleById( FuncUnit_Constants.enableProjectScheduleValidator, ); if (enableProject) { return enableProject.setting; } return; }; } 其中FuncUnit_Constants是根据预置数据生成的，可以问后端你要的业务规则的名字。
业务规则的类型 #  interface IBizProcessFuncUnitSetting { applyTo?: { [key: string]: any } // 应用的对象, 	applyToTypeObject?</description>
    </item>
    
    <item>
      <title>功能权限</title>
      <link>https://zxp-77hub.github.io/docs/common/%E5%8A%9F%E8%83%BD%E6%9D%83%E9%99%90/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zxp-77hub.github.io/docs/common/%E5%8A%9F%E8%83%BD%E6%9D%83%E9%99%90/</guid>
      <description>实现 #  使用下面的代码就可以做到查看功能权限
import { checkAuth } from &amp;#39;@root/func-auth&amp;#39;; import { FunctionAuthActionType } from &amp;#39;@metadata&amp;#39;; checkAuth(EN_Project, FunctionAuthActionType.View) checkAuth方法 #  checkAuth方法的参数：
   参数 描述     resourceId 资源id   actionType 权限类型，有新增、查看、导出、打印等等    resourceId可能是entityId，也可能是另外定义的resourceId，在文件packages/athena-gen/src/entity-constants/ResourceConstants.ts中。具体是哪个需要和后端确认。
actionType的定义在文件apps/link/node_modules/@q7/metadata/src/declare/constants.ts中。摘录到下面。
/** * 功能权限 Action 集合 */ export enum FunctionAuthActionType { // 新增  Add = &amp;#39;add&amp;#39;, // 查看  View = &amp;#39;view&amp;#39;, // 修改  Update = &amp;#39;update&amp;#39;, // 删除  Delete = &amp;#39;delete&amp;#39;, // 输出  Export = &amp;#39;export&amp;#39;, // 打印  Print = &amp;#39;print&amp;#39;, // 作废  Abort = &amp;#39;abort&amp;#39;, // 弃审  Unapprove = &amp;#39;unapprove&amp;#39;, // 审评  Approve = &amp;#39;approve&amp;#39;, // 执行  Execute = &amp;#39;execute&amp;#39;, // 挂起  Suspend = &amp;#39;suspend&amp;#39;, // 取消挂起  CancelSuspend = &amp;#39;cancelSuspend&amp;#39;, // 关闭  Close = &amp;#39;close&amp;#39;, // 打开  Open = &amp;#39;open&amp;#39;, // 预览  Preview = &amp;#39;preview&amp;#39;, // 附件上传  AttachemetUpload = &amp;#39;attachemetUpload&amp;#39;, // 附件删除  AttachmentDelete = &amp;#39;attachmentDelete&amp;#39;, // 附件预览  AttachmentView = &amp;#39;attachmentView&amp;#39;, // 发布  Publish = &amp;#39;publish&amp;#39;, // 设置  Setup = &amp;#39;setup&amp;#39;, // 变更  Change = &amp;#39;change&amp;#39;, } </description>
    </item>
    
    <item>
      <title>后端的接口</title>
      <link>https://zxp-77hub.github.io/docs/common/%E6%8E%A5%E5%8F%A3/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zxp-77hub.github.io/docs/common/%E6%8E%A5%E5%8F%A3/</guid>
      <description>之所以叫“后端的接口”是为了与“go的接口”区分开。
因为前端只能访问到go不能直接访问到后端，所以后端提供的接口，只能通过go访问。那么就要在go上加一个接口，前端访问go的接口，go访问后端的接口。
下面介绍一下实现一个go接口的步骤。
一、声明后端接口地址 #  在文件 trek/urls/url.go 中声明接口地址
比如这样
// 批量设置执行指标 	BudgetBatchSetIndicators := BudgetHost + &amp;#34;/baseapp/BudgetAccount/batchSetIndicators&amp;#34; 其中的 BudgetHost 是服务的地址，可以在文件的开头看到，它是根据具体的服务会有所不同的。
二、添加go的接口 #  找到文件 trek/web/controllers/web-controllers/transparent/index.go
1. 在 BeforeActivation 方法中创建go的接口 #  1 2 3 4 5  func (c *transparentController) BeforeActivation(b mvc.BeforeActivation) { // ...  b.Handle(iris.MethodPost, &amp;#34;/BudgetAccount/batchSetIndicators&amp;#34;, &amp;#34;BudgetAccountBatchSetIndicators&amp;#34;)  // ... }   其中b.Handle 方法的三个参数分别是
 http method go接口url（前端访问的url） go接口的处理函数  2. 实现“处理函数” #  在上面提到的BeforeActivation方法下面，创建一个与它同级的方法，也就是接口处理函数，内容就是直接给后端发起一个请求。
其中第11行是第一步中声明的后端url地址 1 2 3 4 5 6 7 8 9 10 11 12  func (c *transparentController) BeforeActivation(b mvc.</description>
    </item>
    
    <item>
      <title>数据权限</title>
      <link>https://zxp-77hub.github.io/docs/common/%E6%95%B0%E6%8D%AE%E6%9D%83%E9%99%90/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zxp-77hub.github.io/docs/common/%E6%95%B0%E6%8D%AE%E6%9D%83%E9%99%90/</guid>
      <description>前端的gql默认是会按数据权限过滤的。
如果想忽略数据权限的话，需要在option中加contextObject参数，当这个参数是不在数据权限范围内的实体时，就表示忽略数据权限。
所以这里以ignoreDataAuth字符串为参数，来达到忽略权限的目的。
1 2 3 4 5  const dataLoader = new DataLoader(EN_BudgetPlan, [&amp;#39;id&amp;#39;], { criteriaStr: `projectId=&amp;#39;${this.projectId}&amp;#39;`, sorts: [{ name: &amp;#39;createdTime&amp;#39;, isDesending: true }], contextObject: &amp;#39;ignoreDataAuth&amp;#39;, } as IDataLoaderQueryOptions);   </description>
    </item>
    
    <item>
      <title>脱离form对entity进行crud</title>
      <link>https://zxp-77hub.github.io/docs/common/entitycrud/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zxp-77hub.github.io/docs/common/entitycrud/</guid>
      <description>有时我们需要新增、修改、删除一条entity的数据。但是这个entity又没有开发对应的form，无法通过表单来完成。这时就要用到EntityCRUDHelper了
import { EntityCRUDHelper } from &amp;#39;@root/solutions/entity-crud&amp;#39;; EntityCRUDHelper.getInstance().update(EN_BudgetAccountDocImport, data) EntityCRUDHelper提供了create/update/delete等几个方法，可以直接基于entity进行crud操作。
   方法 参数 描述     create entityName, data 创建一条记录   update entityName, data 修改一条记录    注意事项 #  entity不能是子表。子表必须通过主表创建。</description>
    </item>
    
  </channel>
</rss>
