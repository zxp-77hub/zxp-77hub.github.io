[{"id":0,"href":"/docs/base/%E5%88%9D%E5%85%A5%E6%96%B0%E6%89%8B%E6%9D%91/","title":"初入新手村","section":"前端框架基础","content":"一、VPN #   申请vpn    等陈欢（欢姐）把vpn的证书发过来。\n  安装openvpn，应用证书。\n  二、安装环境 #  注意事项：\n go环境的目录结构，GOROOT/src/ metadata项目的名字，git仓库名和本地文件名不一样 go的证书  "},{"id":1,"href":"/docs/common/gql/","title":"GQL","section":"通用功能攻略","content":"普通的gql #  最简单的，直接查一个对象（表）的全部数据\n{ BudgetAccount{ id name accountType { id name } } } 加一点查询条件\n{ BudgetAccount(criteriaStr:\u0026quot;name in ('1','2','3')\u0026quot;){ id name accountType { id name } } } 这个会查到name为1、2、3的多条数据\n高级的gql #  上面只能查到一个表的数据及其关联的外键，子表的数据。下面来搞一个子查询。\n 因为有的时候，后端的模型中，没有包含我们需要的子表，只能我们自己构建\n { BudgetAccount(criteriaStr:\u0026quot;\u0026quot;){ a: exprField(expr:\u0026quot;()\u0026quot;) b: exprField(expr:\u0026quot;()\u0026quot;) } } 其中a:是个模型上的一个字段起别名，exprField是一个可以扩展的额外字段，利用这两个就可以做成子查询了。\n举个例子。对于预算指标，复合指标有若干个子指标，但是直接通过BudgetIndicator模型获取不到它们。就可以这样做\n{ BudgetIndicator(criteriaStr:\u0026quot;isComposite=true\u0026quot;){ id isComposite child: exprField(expr:\u0026quot;(select string_agg(CONCAT_WS(',',childIndicator.id,childIndicator.name),';') from BudgetIndicatorComposition where parentIndicatorId=m.id)\u0026quot;) } } 这里使用了两个sql函数把多条记录、多个字段组合成了一个字符串。拿到数据后前端经过简单的split转化就可以拿到json对象了。\n常用的sql函数 #  string_agg: 如果查出来有多条结果，会将它们拼装为一个字符串\n例子：string_agg(object.name, ', ')\ncoalesce：如果alias存在则取alias，不存在取name\n例子：string_agg((coalesce(indicator.alias, indicator.name)), ', ')\nconcat_ws：拼装一条记录的多个字段为一个字段\n例子：string_agg(CONCAT_WS(',',childIndicator.id,childIndicator.name),';')\nDataLoader #  const settingDataLoader = new DataLoader(EN_Setting, [\u0026#39;values.value\u0026#39;], { criteriaStr: `key=\u0026#39;${accountingBook}\u0026#39;`, } as QueryOptions); const ret = await settingDataLoader.query(); 不适用DataLoader，直接使用gql #  import client from \u0026#39;@client\u0026#39;; const fetchControlBalance = async (criteriaStr: string, dimensionField: string[]) =\u0026gt; { const res = await client.query\u0026lt;{ data: Array\u0026lt;IInvoiceType\u0026gt; }\u0026gt;({ query: ` { data: BudgetControlBalance(criteriaStr: \u0026#34;${criteriaStr}\u0026#34;){ id } } `, }); return res.data.data }; Go怎么查GQL #  func GetFieldMapping(c context.TrekContext, billClassId string) []Mapping { queryString := `{ BudgetDimensionFieldMapping(criteriaStr:\u0026#34;billClassId = \u0026#39;{{.billClassId}}\u0026#39; and dimensionId = \u0026#39;FinancialOrg\u0026#39;\u0026#34;){ mappingToWhereId mappingField } }` query := graphql.GraphqlTemplate(queryString, map[string]string{ \u0026#34;billClassId\u0026#34;: billClassId, }) data := map[string]interface{}{ \u0026#34;query\u0026#34;: query, } var dataJson FieldMappingRes context.HttpRequest.DoHTTPPost(c, urls.AppGraphQL, \u0026amp;context.HTTPOptions{ BindBody: \u0026amp;dataJson, ParamStruct: \u0026amp;data, }) return dataJson.Data.BudgetDimensionFieldMapping } type Mapping struct { MappingToWhereId string `json:\u0026#34;mappingToWhereId\u0026#34;` MappingField string `json:\u0026#34;mappingField\u0026#34;` } type FieldMappingRes struct { Data struct { BudgetDimensionFieldMapping []Mapping `json:\u0026#34;BudgetDimensionFieldMapping\u0026#34;` } `json:\u0026#34;data\u0026#34;` Errors []interface{} `json:\u0026#34;errors\u0026#34;` }  queryString定义语句的模板，其中可以包含一些模板变量 GraphqlTemplate将模板变量引用到模板 用DoHTTPPost发起请求  "},{"id":2,"href":"/posts/creating-a-new-theme/","title":"Creating a New Theme","section":"Blog","content":"Introduction #  This tutorial will show you how to create a simple theme in Hugo. I assume that you are familiar with HTML, the bash command line, and that you are comfortable using Markdown to format content. I'll explain how Hugo uses templates and how you can organize your templates to create a theme. I won't cover using CSS to style your theme.\nWe'll start with creating a new site with a very basic template. Then we'll add in a few pages and posts. With small variations on that, you will be able to create many different types of web sites.\nIn this tutorial, commands that you enter will start with the \u0026quot;$\u0026quot; prompt. The output will follow. Lines that start with \u0026quot;#\u0026quot; are comments that I've added to explain a point. When I show updates to a file, the \u0026quot;:wq\u0026quot; on the last line means to save the file.\nHere's an example:\n## this is a comment $ echo this is a command this is a command ## edit the file $ vi foo.md +++ date = \u0026quot;2014-09-28\u0026quot; title = \u0026quot;creating a new theme\u0026quot; +++ bah and humbug :wq ## show it $ cat foo.md +++ date = \u0026quot;2014-09-28\u0026quot; title = \u0026quot;creating a new theme\u0026quot; +++ bah and humbug $ Some Definitions #  There are a few concepts that you need to understand before creating a theme.\nSkins #  Skins are the files responsible for the look and feel of your site. It’s the CSS that controls colors and fonts, it’s the Javascript that determines actions and reactions. It’s also the rules that Hugo uses to transform your content into the HTML that the site will serve to visitors.\nYou have two ways to create a skin. The simplest way is to create it in the layouts/ directory. If you do, then you don’t have to worry about configuring Hugo to recognize it. The first place that Hugo will look for rules and files is in the layouts/ directory so it will always find the skin.\nYour second choice is to create it in a sub-directory of the themes/ directory. If you do, then you must always tell Hugo where to search for the skin. It’s extra work, though, so why bother with it?\nThe difference between creating a skin in layouts/ and creating it in themes/ is very subtle. A skin in layouts/ can’t be customized without updating the templates and static files that it is built from. A skin created in themes/, on the other hand, can be and that makes it easier for other people to use it.\nThe rest of this tutorial will call a skin created in the themes/ directory a theme.\nNote that you can use this tutorial to create a skin in the layouts/ directory if you wish to. The main difference will be that you won’t need to update the site’s configuration file to use a theme.\nThe Home Page #  The home page, or landing page, is the first page that many visitors to a site see. It is the index.html file in the root directory of the web site. Since Hugo writes files to the public/ directory, our home page is public/index.html.\nSite Configuration File #  When Hugo runs, it looks for a configuration file that contains settings that override default values for the entire site. The file can use TOML, YAML, or JSON. I prefer to use TOML for my configuration files. If you prefer to use JSON or YAML, you’ll need to translate my examples. You’ll also need to change the name of the file since Hugo uses the extension to determine how to process it.\nHugo translates Markdown files into HTML. By default, Hugo expects to find Markdown files in your content/ directory and template files in your themes/ directory. It will create HTML files in your public/ directory. You can change this by specifying alternate locations in the configuration file.\nContent #  Content is stored in text files that contain two sections. The first section is the “front matter,” which is the meta-information on the content. The second section contains Markdown that will be converted to HTML.\nFront Matter #  The front matter is information about the content. Like the configuration file, it can be written in TOML, YAML, or JSON. Unlike the configuration file, Hugo doesn’t use the file’s extension to know the format. It looks for markers to signal the type. TOML is surrounded by “+++”, YAML by “---”, and JSON is enclosed in curly braces. I prefer to use TOML, so you’ll need to translate my examples if you prefer YAML or JSON.\nThe information in the front matter is passed into the template before the content is rendered into HTML.\nMarkdown #  Content is written in Markdown which makes it easier to create the content. Hugo runs the content through a Markdown engine to create the HTML which will be written to the output file.\nTemplate Files #  Hugo uses template files to render content into HTML. Template files are a bridge between the content and presentation. Rules in the template define what content is published, where it's published to, and how it will rendered to the HTML file. The template guides the presentation by specifying the style to use.\nThere are three types of templates: single, list, and partial. Each type takes a bit of content as input and transforms it based on the commands in the template.\nHugo uses its knowledge of the content to find the template file used to render the content. If it can’t find a template that is an exact match for the content, it will shift up a level and search from there. It will continue to do so until it finds a matching template or runs out of templates to try. If it can’t find a template, it will use the default template for the site.\nPlease note that you can use the front matter to influence Hugo’s choice of templates.\nSingle Template #  A single template is used to render a single piece of content. For example, an article or post would be a single piece of content and use a single template.\nList Template #  A list template renders a group of related content. That could be a summary of recent postings or all articles in a category. List templates can contain multiple groups.\nThe homepage template is a special type of list template. Hugo assumes that the home page of your site will act as the portal for the rest of the content in the site.\nPartial Template #  A partial template is a template that can be included in other templates. Partial templates must be called using the “partial” template command. They are very handy for rolling up common behavior. For example, your site may have a banner that all pages use. Instead of copying the text of the banner into every single and list template, you could create a partial with the banner in it. That way if you decide to change the banner, you only have to change the partial template.\nCreate a New Site #  Let's use Hugo to create a new web site. I'm a Mac user, so I'll create mine in my home directory, in the Sites folder. If you're using Linux, you might have to create the folder first.\nThe \u0026quot;new site\u0026quot; command will create a skeleton of a site. It will give you the basic directory structure and a useable configuration file.\n$ hugo new site ~/Sites/zafta $ cd ~/Sites/zafta $ ls -l total 8 drwxr-xr-x 7 quoha staff 238 Sep 29 16:49 . drwxr-xr-x 3 quoha staff 102 Sep 29 16:49 .. drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 archetypes -rw-r--r-- 1 quoha staff 82 Sep 29 16:49 config.toml drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 content drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 layouts drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 static $ Take a look in the content/ directory to confirm that it is empty.\nThe other directories (archetypes/, layouts/, and static/) are used when customizing a theme. That's a topic for a different tutorial, so please ignore them for now.\nGenerate the HTML For the New Site #  Running the hugo command with no options will read all the available content and generate the HTML files. It will also copy all static files (that's everything that's not content). Since we have an empty site, it won't do much, but it will do it very quickly.\n$ hugo --verbose INFO: 2014/09/29 Using config file: config.toml INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/ WARN: 2014/09/29 Unable to locate layout: [index.html _default/list.html _default/single.html] WARN: 2014/09/29 Unable to locate layout: [404.html] 0 draft content 0 future content 0 pages created 0 tags created 0 categories created in 2 ms $ The \u0026quot;--verbose\u0026quot; flag gives extra information that will be helpful when we build the template. Every line of the output that starts with \u0026quot;INFO:\u0026quot; or \u0026quot;WARN:\u0026quot; is present because we used that flag. The lines that start with \u0026quot;WARN:\u0026quot; are warning messages. We'll go over them later.\nWe can verify that the command worked by looking at the directory again.\n$ ls -l total 8 drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 archetypes -rw-r--r-- 1 quoha staff 82 Sep 29 16:49 config.toml drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 content drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 layouts drwxr-xr-x 4 quoha staff 136 Sep 29 17:02 public drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 static $ See that new public/ directory? Hugo placed all generated content there. When you're ready to publish your web site, that's the place to start. For now, though, let's just confirm that we have what we'd expect from a site with no content.\n$ ls -l public total 16 -rw-r--r-- 1 quoha staff 416 Sep 29 17:02 index.xml -rw-r--r-- 1 quoha staff 262 Sep 29 17:02 sitemap.xml $ Hugo created two XML files, which is standard, but there are no HTML files.\nTest the New Site #  Verify that you can run the built-in web server. It will dramatically shorten your development cycle if you do. Start it by running the \u0026quot;server\u0026quot; command. If it is successful, you will see output similar to the following:\n$ hugo server --verbose INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/ WARN: 2014/09/29 Unable to locate layout: [index.html _default/list.html _default/single.html] WARN: 2014/09/29 Unable to locate layout: [404.html] 0 draft content 0 future content 0 pages created 0 tags created 0 categories created in 2 ms Serving pages from /Users/quoha/Sites/zafta/public Web Server is available at http://localhost:1313 Press Ctrl+C to stop Connect to the listed URL (it's on the line that starts with \u0026quot;Web Server\u0026quot;). If everything is working correctly, you should get a page that shows the following:\nindex.xml sitemap.xml That's a listing of your public/ directory. Hugo didn't create a home page because our site has no content. When there's no index.html file in a directory, the server lists the files in the directory, which is what you should see in your browser.\nLet’s go back and look at those warnings again.\nWARN: 2014/09/29 Unable to locate layout: [index.html _default/list.html _default/single.html] WARN: 2014/09/29 Unable to locate layout: [404.html] That second warning is easier to explain. We haven’t created a template to be used to generate “page not found errors.” The 404 message is a topic for a separate tutorial.\nNow for the first warning. It is for the home page. You can tell because the first layout that it looked for was “index.html.” That’s only used by the home page.\nI like that the verbose flag causes Hugo to list the files that it's searching for. For the home page, they are index.html, _default/list.html, and _default/single.html. There are some rules that we'll cover later that explain the names and paths. For now, just remember that Hugo couldn't find a template for the home page and it told you so.\nAt this point, you've got a working installation and site that we can build upon. All that’s left is to add some content and a theme to display it.\nCreate a New Theme #  Hugo doesn't ship with a default theme. There are a few available (I counted a dozen when I first installed Hugo) and Hugo comes with a command to create new themes.\nWe're going to create a new theme called \u0026quot;zafta.\u0026quot; Since the goal of this tutorial is to show you how to fill out the files to pull in your content, the theme will not contain any CSS. In other words, ugly but functional.\nAll themes have opinions on content and layout. For example, Zafta uses \u0026quot;post\u0026quot; over \u0026quot;blog\u0026quot;. Strong opinions make for simpler templates but differing opinions make it tougher to use themes. When you build a theme, consider using the terms that other themes do.\nCreate a Skeleton #  Use the hugo \u0026quot;new\u0026quot; command to create the skeleton of a theme. This creates the directory structure and places empty files for you to fill out.\n$ hugo new theme zafta $ ls -l total 8 drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 archetypes -rw-r--r-- 1 quoha staff 82 Sep 29 16:49 config.toml drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 content drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 layouts drwxr-xr-x 4 quoha staff 136 Sep 29 17:02 public drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 static drwxr-xr-x 3 quoha staff 102 Sep 29 17:31 themes $ find themes -type f | xargs ls -l -rw-r--r-- 1 quoha staff 1081 Sep 29 17:31 themes/zafta/LICENSE.md -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/archetypes/default.md -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/_default/list.html -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/_default/single.html -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/index.html -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/partials/footer.html -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/partials/header.html -rw-r--r-- 1 quoha staff 93 Sep 29 17:31 themes/zafta/theme.toml $ The skeleton includes templates (the files ending in .html), license file, a description of your theme (the theme.toml file), and an empty archetype.\nPlease take a minute to fill out the theme.toml and LICENSE.md files. They're optional, but if you're going to be distributing your theme, it tells the world who to praise (or blame). It's also nice to declare the license so that people will know how they can use the theme.\n$ vi themes/zafta/theme.toml author = \u0026quot;michael d henderson\u0026quot; description = \u0026quot;a minimal working template\u0026quot; license = \u0026quot;MIT\u0026quot; name = \u0026quot;zafta\u0026quot; source_repo = \u0026quot;\u0026quot; tags = [\u0026quot;tags\u0026quot;, \u0026quot;categories\u0026quot;] :wq ## also edit themes/zafta/LICENSE.md and change ## the bit that says \u0026quot;YOUR_NAME_HERE\u0026quot; Note that the the skeleton's template files are empty. Don't worry, we'll be changing that shortly.\n$ find themes/zafta -name '*.html' | xargs ls -l -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/_default/list.html -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/_default/single.html -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/index.html -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/partials/footer.html -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/partials/header.html $ Update the Configuration File to Use the Theme #  Now that we've got a theme to work with, it's a good idea to add the theme name to the configuration file. This is optional, because you can always add \u0026quot;-t zafta\u0026quot; on all your commands. I like to put it the configuration file because I like shorter command lines. If you don't put it in the configuration file or specify it on the command line, you won't use the template that you're expecting to.\nEdit the file to add the theme, add a title for the site, and specify that all of our content will use the TOML format.\n$ vi config.toml theme = \u0026quot;zafta\u0026quot; baseurl = \u0026quot;\u0026quot; languageCode = \u0026quot;en-us\u0026quot; title = \u0026quot;zafta - totally refreshing\u0026quot; MetaDataFormat = \u0026quot;toml\u0026quot; :wq $ Generate the Site #  Now that we have an empty theme, let's generate the site again.\n$ hugo --verbose INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/ INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/ WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html] 0 draft content 0 future content 0 pages created 0 tags created 0 categories created in 2 ms $ Did you notice that the output is different? The warning message for the home page has disappeared and we have an additional information line saying that Hugo is syncing from the theme's directory.\nLet's check the public/ directory to see what Hugo's created.\n$ ls -l public total 16 drwxr-xr-x 2 quoha staff 68 Sep 29 17:56 css -rw-r--r-- 1 quoha staff 0 Sep 29 17:56 index.html -rw-r--r-- 1 quoha staff 407 Sep 29 17:56 index.xml drwxr-xr-x 2 quoha staff 68 Sep 29 17:56 js -rw-r--r-- 1 quoha staff 243 Sep 29 17:56 sitemap.xml $ Notice four things:\n Hugo created a home page. This is the file public/index.html. Hugo created a css/ directory. Hugo created a js/ directory. Hugo claimed that it created 0 pages. It created a file and copied over static files, but didn't create any pages. That's because it considers a \u0026quot;page\u0026quot; to be a file created directly from a content file. It doesn't count things like the index.html files that it creates automatically.  The Home Page #  Hugo supports many different types of templates. The home page is special because it gets its own type of template and its own template file. The file, layouts/index.html, is used to generate the HTML for the home page. The Hugo documentation says that this is the only required template, but that depends. Hugo's warning message shows that it looks for three different templates:\nWARN: 2014/09/29 Unable to locate layout: [index.html _default/list.html _default/single.html] If it can't find any of these, it completely skips creating the home page. We noticed that when we built the site without having a theme installed.\nWhen Hugo created our theme, it created an empty home page template. Now, when we build the site, Hugo finds the template and uses it to generate the HTML for the home page. Since the template file is empty, the HTML file is empty, too. If the template had any rules in it, then Hugo would have used them to generate the home page.\n$ find . -name index.html | xargs ls -l -rw-r--r-- 1 quoha staff 0 Sep 29 20:21 ./public/index.html -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 ./themes/zafta/layouts/index.html $ The Magic of Static #  Hugo does two things when generating the site. It uses templates to transform content into HTML and it copies static files into the site. Unlike content, static files are not transformed. They are copied exactly as they are.\nHugo assumes that your site will use both CSS and JavaScript, so it creates directories in your theme to hold them. Remember opinions? Well, Hugo's opinion is that you'll store your CSS in a directory named css/ and your JavaScript in a directory named js/. If you don't like that, you can change the directory names in your theme directory or even delete them completely. Hugo's nice enough to offer its opinion, then behave nicely if you disagree.\n$ find themes/zafta -type d | xargs ls -ld drwxr-xr-x 7 quoha staff 238 Sep 29 17:38 themes/zafta drwxr-xr-x 3 quoha staff 102 Sep 29 17:31 themes/zafta/archetypes drwxr-xr-x 5 quoha staff 170 Sep 29 17:31 themes/zafta/layouts drwxr-xr-x 4 quoha staff 136 Sep 29 17:31 themes/zafta/layouts/_default drwxr-xr-x 4 quoha staff 136 Sep 29 17:31 themes/zafta/layouts/partials drwxr-xr-x 4 quoha staff 136 Sep 29 17:31 themes/zafta/static drwxr-xr-x 2 quoha staff 68 Sep 29 17:31 themes/zafta/static/css drwxr-xr-x 2 quoha staff 68 Sep 29 17:31 themes/zafta/static/js $ The Theme Development Cycle #  When you're working on a theme, you will make changes in the theme's directory, rebuild the site, and check your changes in the browser. Hugo makes this very easy:\n Purge the public/ directory. Run the built in web server in watch mode. Open your site in a browser. Update the theme. Glance at your browser window to see changes. Return to step 4.  I’ll throw in one more opinion: never work on a theme on a live site. Always work on a copy of your site. Make changes to your theme, test them, then copy them up to your site. For added safety, use a tool like Git to keep a revision history of your content and your theme. Believe me when I say that it is too easy to lose both your mind and your changes.\nCheck the main Hugo site for information on using Git with Hugo.\nPurge the public/ Directory #  When generating the site, Hugo will create new files and update existing ones in the public/ directory. It will not delete files that are no longer used. For example, files that were created in the wrong directory or with the wrong title will remain. If you leave them, you might get confused by them later. I recommend cleaning out your site prior to generating it.\nNote: If you're building on an SSD, you should ignore this. Churning on a SSD can be costly.\nHugo's Watch Option #  Hugo's \u0026quot;--watch\u0026quot; option will monitor the content/ and your theme directories for changes and rebuild the site automatically.\nLive Reload #  Hugo's built in web server supports live reload. As pages are saved on the server, the browser is told to refresh the page. Usually, this happens faster than you can say, \u0026quot;Wow, that's totally amazing.\u0026quot;\nDevelopment Commands #  Use the following commands as the basis for your workflow.\n## purge old files. hugo will recreate the public directory. ## $ rm -rf public ## ## run hugo in watch mode ## $ hugo server --watch --verbose Here's sample output showing Hugo detecting a change to the template for the home page. Once generated, the web browser automatically reloaded the page. I've said this before, it's amazing.\n$ rm -rf public $ hugo server --watch --verbose INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/ INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/ WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html] 0 draft content 0 future content 0 pages created 0 tags created 0 categories created in 2 ms Watching for changes in /Users/quoha/Sites/zafta/content Serving pages from /Users/quoha/Sites/zafta/public Web Server is available at http://localhost:1313 Press Ctrl+C to stop INFO: 2014/09/29 File System Event: [\u0026quot;/Users/quoha/Sites/zafta/themes/zafta/layouts/index.html\u0026quot;: MODIFY|ATTRIB] Change detected, rebuilding site WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html] 0 draft content 0 future content 0 pages created 0 tags created 0 categories created in 1 ms Update the Home Page Template #  The home page is one of a few special pages that Hugo creates automatically. As mentioned earlier, it looks for one of three files in the theme's layout/ directory:\n index.html _default/list.html _default/single.html  We could update one of the default templates, but a good design decision is to update the most specific template available. That's not a hard and fast rule (in fact, we'll break it a few times in this tutorial), but it is a good generalization.\nMake a Static Home Page #  Right now, that page is empty because we don't have any content and we don't have any logic in the template. Let's change that by adding some text to the template.\n$ vi themes/zafta/layouts/index.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;hugo says hello!\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; :wq $ Build the web site and then verify the results.\n$ hugo --verbose INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/ INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/ WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html] 0 draft content 0 future content 0 pages created 0 tags created 0 categories created in 2 ms $ find public -type f -name '*.html' | xargs ls -l -rw-r--r-- 1 quoha staff 78 Sep 29 21:26 public/index.html $ cat public/index.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;hugo says hello!\u0026lt;/p\u0026gt; \u0026lt;/html\u0026gt; Live Reload #  Note: If you're running the server with the --watch option, you'll see different content in the file:\n$ cat public/index.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;hugo says hello!\u0026lt;/p\u0026gt; \u0026lt;script\u0026gt;document.write('\u0026lt;script src=\u0026quot;http://' + (location.host || 'localhost').split(':')[0] + ':1313/livereload.js?mindelay=10\u0026quot;\u0026gt;\u0026lt;/' + 'script\u0026gt;')\u0026lt;/script\u0026gt;\u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; When you use --watch, the Live Reload script is added by Hugo. Look for live reload in the documentation to see what it does and how to disable it.\nBuild a \u0026quot;Dynamic\u0026quot; Home Page #  \u0026quot;Dynamic home page?\u0026quot; Hugo's a static web site generator, so this seems an odd thing to say. I mean let's have the home page automatically reflect the content in the site every time Hugo builds it. We'll use iteration in the template to do that.\nCreate New Posts #  Now that we have the home page generating static content, let's add some content to the site. We'll display these posts as a list on the home page and on their own page, too.\nHugo has a command to generate a skeleton post, just like it does for sites and themes.\n$ hugo --verbose new post/first.md INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml INFO: 2014/09/29 attempting to create post/first.md of post INFO: 2014/09/29 curpath: /Users/quoha/Sites/zafta/themes/zafta/archetypes/default.md ERROR: 2014/09/29 Unable to Cast \u0026lt;nil\u0026gt; to map[string]interface{} $ That wasn't very nice, was it?\nThe \u0026quot;new\u0026quot; command uses an archetype to create the post file. Hugo created an empty default archetype file, but that causes an error when there's a theme. For me, the workaround was to create an archetypes file specifically for the post type.\n$ vi themes/zafta/archetypes/post.md +++ Description = \u0026quot;\u0026quot; Tags = [] Categories = [] +++ :wq $ find themes/zafta/archetypes -type f | xargs ls -l -rw-r--r-- 1 quoha staff 0 Sep 29 21:53 themes/zafta/archetypes/default.md -rw-r--r-- 1 quoha staff 51 Sep 29 21:54 themes/zafta/archetypes/post.md $ hugo --verbose new post/first.md INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml INFO: 2014/09/29 attempting to create post/first.md of post INFO: 2014/09/29 curpath: /Users/quoha/Sites/zafta/themes/zafta/archetypes/post.md INFO: 2014/09/29 creating /Users/quoha/Sites/zafta/content/post/first.md /Users/quoha/Sites/zafta/content/post/first.md created $ hugo --verbose new post/second.md INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml INFO: 2014/09/29 attempting to create post/second.md of post INFO: 2014/09/29 curpath: /Users/quoha/Sites/zafta/themes/zafta/archetypes/post.md INFO: 2014/09/29 creating /Users/quoha/Sites/zafta/content/post/second.md /Users/quoha/Sites/zafta/content/post/second.md created $ ls -l content/post total 16 -rw-r--r-- 1 quoha staff 104 Sep 29 21:54 first.md -rw-r--r-- 1 quoha staff 105 Sep 29 21:57 second.md $ cat content/post/first.md +++ Categories = [] Description = \u0026quot;\u0026quot; Tags = [] date = \u0026quot;2014-09-29T21:54:53-05:00\u0026quot; title = \u0026quot;first\u0026quot; +++ my first post $ cat content/post/second.md +++ Categories = [] Description = \u0026quot;\u0026quot; Tags = [] date = \u0026quot;2014-09-29T21:57:09-05:00\u0026quot; title = \u0026quot;second\u0026quot; +++ my second post $ Build the web site and then verify the results.\n$ rm -rf public $ hugo --verbose INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/ INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/ INFO: 2014/09/29 found taxonomies: map[string]string{\u0026quot;category\u0026quot;:\u0026quot;categories\u0026quot;, \u0026quot;tag\u0026quot;:\u0026quot;tags\u0026quot;} WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html] 0 draft content 0 future content 2 pages created 0 tags created 0 categories created in 4 ms $ The output says that it created 2 pages. Those are our new posts:\n$ find public -type f -name '*.html' | xargs ls -l -rw-r--r-- 1 quoha staff 78 Sep 29 22:13 public/index.html -rw-r--r-- 1 quoha staff 0 Sep 29 22:13 public/post/first/index.html -rw-r--r-- 1 quoha staff 0 Sep 29 22:13 public/post/index.html -rw-r--r-- 1 quoha staff 0 Sep 29 22:13 public/post/second/index.html $ The new files are empty because because the templates used to generate the content are empty. The homepage doesn't show the new content, either. We have to update the templates to add the posts.\nList and Single Templates #  In Hugo, we have three major kinds of templates. There's the home page template that we updated previously. It is used only by the home page. We also have \u0026quot;single\u0026quot; templates which are used to generate output for a single content file. We also have \u0026quot;list\u0026quot; templates that are used to group multiple pieces of content before generating output.\nGenerally speaking, list templates are named \u0026quot;list.html\u0026quot; and single templates are named \u0026quot;single.html.\u0026quot;\nThere are three other types of templates: partials, content views, and terms. We will not go into much detail on these.\nAdd Content to the Homepage #  The home page will contain a list of posts. Let's update its template to add the posts that we just created. The logic in the template will run every time we build the site.\n$ vi themes/zafta/layouts/index.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;body\u0026gt; {{ range first 10 .Data.Pages }} \u0026lt;h1\u0026gt;{{ .Title }}\u0026lt;/h1\u0026gt; {{ end }} \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; :wq $ Hugo uses the Go template engine. That engine scans the template files for commands which are enclosed between \u0026quot;{{\u0026quot; and \u0026quot;}}\u0026quot;. In our template, the commands are:\n range .Title end  The \u0026quot;range\u0026quot; command is an iterator. We're going to use it to go through the first ten pages. Every HTML file that Hugo creates is treated as a page, so looping through the list of pages will look at every file that will be created.\nThe \u0026quot;.Title\u0026quot; command prints the value of the \u0026quot;title\u0026quot; variable. Hugo pulls it from the front matter in the Markdown file.\nThe \u0026quot;end\u0026quot; command signals the end of the range iterator. The engine loops back to the top of the iteration when it finds \u0026quot;end.\u0026quot; Everything between the \u0026quot;range\u0026quot; and \u0026quot;end\u0026quot; is evaluated every time the engine goes through the iteration. In this file, that would cause the title from the first ten pages to be output as heading level one.\nIt's helpful to remember that some variables, like .Data, are created before any output files. Hugo loads every content file into the variable and then gives the template a chance to process before creating the HTML files.\nBuild the web site and then verify the results.\n$ rm -rf public $ hugo --verbose INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/ INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/ INFO: 2014/09/29 found taxonomies: map[string]string{\u0026quot;tag\u0026quot;:\u0026quot;tags\u0026quot;, \u0026quot;category\u0026quot;:\u0026quot;categories\u0026quot;} WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html] 0 draft content 0 future content 2 pages created 0 tags created 0 categories created in 4 ms $ find public -type f -name '*.html' | xargs ls -l -rw-r--r-- 1 quoha staff 94 Sep 29 22:23 public/index.html -rw-r--r-- 1 quoha staff 0 Sep 29 22:23 public/post/first/index.html -rw-r--r-- 1 quoha staff 0 Sep 29 22:23 public/post/index.html -rw-r--r-- 1 quoha staff 0 Sep 29 22:23 public/post/second/index.html $ cat public/index.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;second\u0026lt;/h1\u0026gt; \u0026lt;h1\u0026gt;first\u0026lt;/h1\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; $ Congratulations, the home page shows the title of the two posts. The posts themselves are still empty, but let's take a moment to appreciate what we've done. Your template now generates output dynamically. Believe it or not, by inserting the range command inside of those curly braces, you've learned everything you need to know to build a theme. All that's really left is understanding which template will be used to generate each content file and becoming familiar with the commands for the template engine.\nAnd, if that were entirely true, this tutorial would be much shorter. There are a few things to know that will make creating a new template much easier. Don't worry, though, that's all to come.\nAdd Content to the Posts #  We're working with posts, which are in the content/post/ directory. That means that their section is \u0026quot;post\u0026quot; (and if we don't do something weird, their type is also \u0026quot;post\u0026quot;).\nHugo uses the section and type to find the template file for every piece of content. Hugo will first look for a template file that matches the section or type name. If it can't find one, then it will look in the _default/ directory. There are some twists that we'll cover when we get to categories and tags, but for now we can assume that Hugo will try post/single.html, then _default/single.html.\nNow that we know the search rule, let's see what we actually have available:\n$ find themes/zafta -name single.html | xargs ls -l -rw-r--r-- 1 quoha staff 132 Sep 29 17:31 themes/zafta/layouts/_default/single.html We could create a new template, post/single.html, or change the default. Since we don't know of any other content types, let's start with updating the default.\nRemember, any content that we haven't created a template for will end up using this template. That can be good or bad. Bad because I know that we're going to be adding different types of content and we're going to end up undoing some of the changes we've made. It's good because we'll be able to see immediate results. It's also good to start here because we can start to build the basic layout for the site. As we add more content types, we'll refactor this file and move logic around. Hugo makes that fairly painless, so we'll accept the cost and proceed.\nPlease see the Hugo documentation on template rendering for all the details on determining which template to use. And, as the docs mention, if you're building a single page application (SPA) web site, you can delete all of the other templates and work with just the default single page. That's a refreshing amount of joy right there.\nUpdate the Template File #  $ vi themes/zafta/layouts/_default/single.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;{{ .Title }}\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;{{ .Title }}\u0026lt;/h1\u0026gt; {{ .Content }} \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; :wq $ Build the web site and verify the results.\n$ rm -rf public $ hugo --verbose INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/ INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/ INFO: 2014/09/29 found taxonomies: map[string]string{\u0026quot;tag\u0026quot;:\u0026quot;tags\u0026quot;, \u0026quot;category\u0026quot;:\u0026quot;categories\u0026quot;} WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html] 0 draft content 0 future content 2 pages created 0 tags created 0 categories created in 4 ms $ find public -type f -name '*.html' | xargs ls -l -rw-r--r-- 1 quoha staff 94 Sep 29 22:40 public/index.html -rw-r--r-- 1 quoha staff 125 Sep 29 22:40 public/post/first/index.html -rw-r--r-- 1 quoha staff 0 Sep 29 22:40 public/post/index.html -rw-r--r-- 1 quoha staff 128 Sep 29 22:40 public/post/second/index.html $ cat public/post/first/index.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;first\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;first\u0026lt;/h1\u0026gt; \u0026lt;p\u0026gt;my first post\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; $ cat public/post/second/index.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;second\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;second\u0026lt;/h1\u0026gt; \u0026lt;p\u0026gt;my second post\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; $ Notice that the posts now have content. You can go to localhost:1313/post/first to verify.\nLinking to Content #  The posts are on the home page. Let's add a link from there to the post. Since this is the home page, we'll update its template.\n$ vi themes/zafta/layouts/index.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;body\u0026gt; {{ range first 10 .Data.Pages }} \u0026lt;h1\u0026gt;\u0026lt;a href=\u0026quot;{{ .Permalink }}\u0026quot;\u0026gt;{{ .Title }}\u0026lt;/a\u0026gt;\u0026lt;/h1\u0026gt; {{ end }} \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Build the web site and verify the results.\n$ rm -rf public $ hugo --verbose INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/ INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/ INFO: 2014/09/29 found taxonomies: map[string]string{\u0026quot;tag\u0026quot;:\u0026quot;tags\u0026quot;, \u0026quot;category\u0026quot;:\u0026quot;categories\u0026quot;} WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html] 0 draft content 0 future content 2 pages created 0 tags created 0 categories created in 4 ms $ find public -type f -name '*.html' | xargs ls -l -rw-r--r-- 1 quoha staff 149 Sep 29 22:44 public/index.html -rw-r--r-- 1 quoha staff 125 Sep 29 22:44 public/post/first/index.html -rw-r--r-- 1 quoha staff 0 Sep 29 22:44 public/post/index.html -rw-r--r-- 1 quoha staff 128 Sep 29 22:44 public/post/second/index.html $ cat public/index.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;\u0026lt;a href=\u0026quot;/post/second/\u0026quot;\u0026gt;second\u0026lt;/a\u0026gt;\u0026lt;/h1\u0026gt; \u0026lt;h1\u0026gt;\u0026lt;a href=\u0026quot;/post/first/\u0026quot;\u0026gt;first\u0026lt;/a\u0026gt;\u0026lt;/h1\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; $ Create a Post Listing #  We have the posts displaying on the home page and on their own page. We also have a file public/post/index.html that is empty. Let's make it show a list of all posts (not just the first ten).\nWe need to decide which template to update. This will be a listing, so it should be a list template. Let's take a quick look and see which list templates are available.\n$ find themes/zafta -name list.html | xargs ls -l -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/_default/list.html As with the single post, we have to decide to update _default/list.html or create post/list.html. We still don't have multiple content types, so let's stay consistent and update the default list template.\nCreating Top Level Pages #  Let's add an \u0026quot;about\u0026quot; page and display it at the top level (as opposed to a sub-level like we did with posts).\nThe default in Hugo is to use the directory structure of the content/ directory to guide the location of the generated html in the public/ directory. Let's verify that by creating an \u0026quot;about\u0026quot; page at the top level:\n$ vi content/about.md +++ title = \u0026quot;about\u0026quot; description = \u0026quot;about this site\u0026quot; date = \u0026quot;2014-09-27\u0026quot; slug = \u0026quot;about time\u0026quot; +++ ## about us i'm speechless :wq Generate the web site and verify the results.\n$ find public -name '*.html' | xargs ls -l -rw-rw-r-- 1 mdhender staff 334 Sep 27 15:08 public/about-time/index.html -rw-rw-r-- 1 mdhender staff 527 Sep 27 15:08 public/index.html -rw-rw-r-- 1 mdhender staff 358 Sep 27 15:08 public/post/first-post/index.html -rw-rw-r-- 1 mdhender staff 0 Sep 27 15:08 public/post/index.html -rw-rw-r-- 1 mdhender staff 342 Sep 27 15:08 public/post/second-post/index.html Notice that the page wasn't created at the top level. It was created in a sub-directory named 'about-time/'. That name came from our slug. Hugo will use the slug to name the generated content. It's a reasonable default, by the way, but we can learn a few things by fighting it for this file.\nOne other thing. Take a look at the home page.\n$ cat public/index.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;\u0026lt;a href=\u0026quot;http://localhost:1313/post/theme/\u0026quot;\u0026gt;creating a new theme\u0026lt;/a\u0026gt;\u0026lt;/h1\u0026gt; \u0026lt;h1\u0026gt;\u0026lt;a href=\u0026quot;http://localhost:1313/about-time/\u0026quot;\u0026gt;about\u0026lt;/a\u0026gt;\u0026lt;/h1\u0026gt; \u0026lt;h1\u0026gt;\u0026lt;a href=\u0026quot;http://localhost:1313/post/second-post/\u0026quot;\u0026gt;second\u0026lt;/a\u0026gt;\u0026lt;/h1\u0026gt; \u0026lt;h1\u0026gt;\u0026lt;a href=\u0026quot;http://localhost:1313/post/first-post/\u0026quot;\u0026gt;first\u0026lt;/a\u0026gt;\u0026lt;/h1\u0026gt; \u0026lt;script\u0026gt;document.write('\u0026lt;script src=\u0026quot;http://' + (location.host || 'localhost').split(':')[0] + ':1313/livereload.js?mindelay=10\u0026quot;\u0026gt;\u0026lt;/' + 'script\u0026gt;')\u0026lt;/script\u0026gt;\u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Notice that the \u0026quot;about\u0026quot; link is listed with the posts? That's not desirable, so let's change that first.\n$ vi themes/zafta/layouts/index.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;posts\u0026lt;/h1\u0026gt; {{ range first 10 .Data.Pages }} {{ if eq .Type \u0026quot;post\u0026quot;}} \u0026lt;h2\u0026gt;\u0026lt;a href=\u0026quot;{{ .Permalink }}\u0026quot;\u0026gt;{{ .Title }}\u0026lt;/a\u0026gt;\u0026lt;/h2\u0026gt; {{ end }} {{ end }} \u0026lt;h1\u0026gt;pages\u0026lt;/h1\u0026gt; {{ range .Data.Pages }} {{ if eq .Type \u0026quot;page\u0026quot; }} \u0026lt;h2\u0026gt;\u0026lt;a href=\u0026quot;{{ .Permalink }}\u0026quot;\u0026gt;{{ .Title }}\u0026lt;/a\u0026gt;\u0026lt;/h2\u0026gt; {{ end }} {{ end }} \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; :wq Generate the web site and verify the results. The home page has two sections, posts and pages, and each section has the right set of headings and links in it.\nBut, that about page still renders to about-time/index.html.\n$ find public -name '*.html' | xargs ls -l -rw-rw-r-- 1 mdhender staff 334 Sep 27 15:33 public/about-time/index.html -rw-rw-r-- 1 mdhender staff 645 Sep 27 15:33 public/index.html -rw-rw-r-- 1 mdhender staff 358 Sep 27 15:33 public/post/first-post/index.html -rw-rw-r-- 1 mdhender staff 0 Sep 27 15:33 public/post/index.html -rw-rw-r-- 1 mdhender staff 342 Sep 27 15:33 public/post/second-post/index.html Knowing that hugo is using the slug to generate the file name, the simplest solution is to change the slug. Let's do it the hard way and change the permalink in the configuration file.\n$ vi config.toml [permalinks] page = \u0026quot;/:title/\u0026quot; about = \u0026quot;/:filename/\u0026quot; Generate the web site and verify that this didn't work. Hugo lets \u0026quot;slug\u0026quot; or \u0026quot;URL\u0026quot; override the permalinks setting in the configuration file. Go ahead and comment out the slug in content/about.md, then generate the web site to get it to be created in the right place.\nSharing Templates #  If you've been following along, you probably noticed that posts have titles in the browser and the home page doesn't. That's because we didn't put the title in the home page's template (layouts/index.html). That's an easy thing to do, but let's look at a different option.\nWe can put the common bits into a shared template that's stored in the themes/zafta/layouts/partials/ directory.\nCreate the Header and Footer Partials #  In Hugo, a partial is a sugar-coated template. Normally a template reference has a path specified. Partials are different. Hugo searches for them along a TODO defined search path. This makes it easier for end-users to override the theme's presentation.\n$ vi themes/zafta/layouts/partials/header.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;{{ .Title }}\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; :wq $ vi themes/zafta/layouts/partials/footer.html \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; :wq Update the Home Page Template to Use the Partials #  The most noticeable difference between a template call and a partials call is the lack of path:\n{{ template \u0026quot;theme/partials/header.html\u0026quot; . }} versus\n{{ partial \u0026quot;header.html\u0026quot; . }} Both pass in the context.\nLet's change the home page template to use these new partials.\n$ vi themes/zafta/layouts/index.html {{ partial \u0026quot;header.html\u0026quot; . }} \u0026lt;h1\u0026gt;posts\u0026lt;/h1\u0026gt; {{ range first 10 .Data.Pages }} {{ if eq .Type \u0026quot;post\u0026quot;}} \u0026lt;h2\u0026gt;\u0026lt;a href=\u0026quot;{{ .Permalink }}\u0026quot;\u0026gt;{{ .Title }}\u0026lt;/a\u0026gt;\u0026lt;/h2\u0026gt; {{ end }} {{ end }} \u0026lt;h1\u0026gt;pages\u0026lt;/h1\u0026gt; {{ range .Data.Pages }} {{ if or (eq .Type \u0026quot;page\u0026quot;) (eq .Type \u0026quot;about\u0026quot;) }} \u0026lt;h2\u0026gt;\u0026lt;a href=\u0026quot;{{ .Permalink }}\u0026quot;\u0026gt;{{ .Type }} - {{ .Title }} - {{ .RelPermalink }}\u0026lt;/a\u0026gt;\u0026lt;/h2\u0026gt; {{ end }} {{ end }} {{ partial \u0026quot;footer.html\u0026quot; . }} :wq Generate the web site and verify the results. The title on the home page is now \u0026quot;your title here\u0026quot;, which comes from the \u0026quot;title\u0026quot; variable in the config.toml file.\nUpdate the Default Single Template to Use the Partials #  $ vi themes/zafta/layouts/_default/single.html {{ partial \u0026quot;header.html\u0026quot; . }} \u0026lt;h1\u0026gt;{{ .Title }}\u0026lt;/h1\u0026gt; {{ .Content }} {{ partial \u0026quot;footer.html\u0026quot; . }} :wq Generate the web site and verify the results. The title on the posts and the about page should both reflect the value in the markdown file.\nAdd “Date Published” to Posts #  It's common to have posts display the date that they were written or published, so let's add that. The front matter of our posts has a variable named \u0026quot;date.\u0026quot; It's usually the date the content was created, but let's pretend that's the value we want to display.\nAdd “Date Published” to the Template #  We'll start by updating the template used to render the posts. The template code will look like:\n{{ .Date.Format \u0026quot;Mon, Jan 2, 2006\u0026quot; }} Posts use the default single template, so we'll change that file.\n$ vi themes/zafta/layouts/_default/single.html {{ partial \u0026quot;header.html\u0026quot; . }} \u0026lt;h1\u0026gt;{{ .Title }}\u0026lt;/h1\u0026gt; \u0026lt;h2\u0026gt;{{ .Date.Format \u0026quot;Mon, Jan 2, 2006\u0026quot; }}\u0026lt;/h2\u0026gt; {{ .Content }} {{ partial \u0026quot;footer.html\u0026quot; . }} :wq Generate the web site and verify the results. The posts now have the date displayed in them. There's a problem, though. The \u0026quot;about\u0026quot; page also has the date displayed.\nAs usual, there are a couple of ways to make the date display only on posts. We could do an \u0026quot;if\u0026quot; statement like we did on the home page. Another way would be to create a separate template for posts.\nThe \u0026quot;if\u0026quot; solution works for sites that have just a couple of content types. It aligns with the principle of \u0026quot;code for today,\u0026quot; too.\nLet's assume, though, that we've made our site so complex that we feel we have to create a new template type. In Hugo-speak, we're going to create a section template.\nLet's restore the default single template before we forget.\n$ mkdir themes/zafta/layouts/post $ vi themes/zafta/layouts/_default/single.html {{ partial \u0026quot;header.html\u0026quot; . }} \u0026lt;h1\u0026gt;{{ .Title }}\u0026lt;/h1\u0026gt; {{ .Content }} {{ partial \u0026quot;footer.html\u0026quot; . }} :wq Now we'll update the post's version of the single template. If you remember Hugo's rules, the template engine will use this version over the default.\n$ vi themes/zafta/layouts/post/single.html {{ partial \u0026quot;header.html\u0026quot; . }} \u0026lt;h1\u0026gt;{{ .Title }}\u0026lt;/h1\u0026gt; \u0026lt;h2\u0026gt;{{ .Date.Format \u0026quot;Mon, Jan 2, 2006\u0026quot; }}\u0026lt;/h2\u0026gt; {{ .Content }} {{ partial \u0026quot;footer.html\u0026quot; . }} :wq Note that we removed the date logic from the default template and put it in the post template. Generate the web site and verify the results. Posts have dates and the about page doesn't.\nDon't Repeat Yourself #  DRY is a good design goal and Hugo does a great job supporting it. Part of the art of a good template is knowing when to add a new template and when to update an existing one. While you're figuring that out, accept that you'll be doing some refactoring. Hugo makes that easy and fast, so it's okay to delay splitting up a template.\n"},{"id":3,"href":"/posts/migrate-from-jekyll/","title":"Migrate to Hugo from Jekyll","section":"Blog","content":"Move static content to static #  Jekyll has a rule that any directory not starting with _ will be copied as-is to the _site output. Hugo keeps all static content under static. You should therefore move it all there. With Jekyll, something that looked like\n▾ \u0026lt;root\u0026gt;/ ▾ images/ logo.png  should become\n▾ \u0026lt;root\u0026gt;/ ▾ static/ ▾ images/ logo.png  Additionally, you'll want any files that should reside at the root (such as CNAME) to be moved to static.\nCreate your Hugo configuration file #  Hugo can read your configuration as JSON, YAML or TOML. Hugo supports parameters custom configuration too. Refer to the Hugo configuration documentation for details.\nSet your configuration publish folder to _site #  The default is for Jekyll to publish to _site and for Hugo to publish to public. If, like me, you have _site mapped to a git submodule on the gh-pages branch, you'll want to do one of two alternatives:\n  Change your submodule to point to map gh-pages to public instead of _site (recommended).\n git submodule deinit _site git rm _site git submodule add -b gh-pages git@github.com:your-username/your-repo.git public    Or, change the Hugo configuration to use _site instead of public.\n { .. \u0026quot;publishdir\u0026quot;: \u0026quot;_site\u0026quot;, .. }    Convert Jekyll templates to Hugo templates #  That's the bulk of the work right here. The documentation is your friend. You should refer to Jekyll's template documentation if you need to refresh your memory on how you built your blog and Hugo's template to learn Hugo's way.\nAs a single reference data point, converting my templates for heyitsalex.net took me no more than a few hours.\nConvert Jekyll plugins to Hugo shortcodes #  Jekyll has plugins; Hugo has shortcodes. It's fairly trivial to do a port.\nImplementation #  As an example, I was using a custom image_tag plugin to generate figures with caption when running Jekyll. As I read about shortcodes, I found Hugo had a nice built-in shortcode that does exactly the same thing.\nJekyll's plugin:\nmodule Jekyll class ImageTag \u0026lt; Liquid::Tag @url = nil @caption = nil @class = nil @link = nil // Patterns IMAGE_URL_WITH_CLASS_AND_CAPTION = IMAGE_URL_WITH_CLASS_AND_CAPTION_AND_LINK = /(\\w+)(\\s+)((https?:\\/\\/|\\/)(\\S+))(\\s+)\u0026quot;(.*?)\u0026quot;(\\s+)-\u0026gt;((https?:\\/\\/|\\/)(\\S+))(\\s*)/i IMAGE_URL_WITH_CAPTION = /((https?:\\/\\/|\\/)(\\S+))(\\s+)\u0026quot;(.*?)\u0026quot;/i IMAGE_URL_WITH_CLASS = /(\\w+)(\\s+)((https?:\\/\\/|\\/)(\\S+))/i IMAGE_URL = /((https?:\\/\\/|\\/)(\\S+))/i def initialize(tag_name, markup, tokens) super if markup =~ IMAGE_URL_WITH_CLASS_AND_CAPTION_AND_LINK @class = $1 @url = $3 @caption = $7 @link = $9 elsif markup =~ IMAGE_URL_WITH_CLASS_AND_CAPTION @class = $1 @url = $3 @caption = $7 elsif markup =~ IMAGE_URL_WITH_CAPTION @url = $1 @caption = $5 elsif markup =~ IMAGE_URL_WITH_CLASS @class = $1 @url = $3 elsif markup =~ IMAGE_URL @url = $1 end end def render(context) if @class source = \u0026quot;\u0026lt;figure class='#{@class}'\u0026gt;\u0026quot; else source = \u0026quot;\u0026lt;figure\u0026gt;\u0026quot; end if @link source += \u0026quot;\u0026lt;a href=\\\u0026quot;#{@link}\\\u0026quot;\u0026gt;\u0026quot; end source += \u0026quot;\u0026lt;img src=\\\u0026quot;#{@url}\\\u0026quot;\u0026gt;\u0026quot; if @link source += \u0026quot;\u0026lt;/a\u0026gt;\u0026quot; end source += \u0026quot;\u0026lt;figcaption\u0026gt;#{@caption}\u0026lt;/figcaption\u0026gt;\u0026quot; if @caption source += \u0026quot;\u0026lt;/figure\u0026gt;\u0026quot; source end end end Liquid::Template.register_tag('image', Jekyll::ImageTag)  is written as this Hugo shortcode:\n\u0026lt;!-- image --\u0026gt; \u0026lt;figure {{ with .Get \u0026quot;class\u0026quot; }}class=\u0026quot;{{.}}\u0026quot;{{ end }}\u0026gt; {{ with .Get \u0026quot;link\u0026quot;}}\u0026lt;a href=\u0026quot;{{.}}\u0026quot;\u0026gt;{{ end }} \u0026lt;img src=\u0026quot;{{ .Get \u0026quot;src\u0026quot; }}\u0026quot; {{ if or (.Get \u0026quot;alt\u0026quot;) (.Get \u0026quot;caption\u0026quot;) }}alt=\u0026quot;{{ with .Get \u0026quot;alt\u0026quot;}}{{.}}{{else}}{{ .Get \u0026quot;caption\u0026quot; }}{{ end }}\u0026quot;{{ end }} /\u0026gt; {{ if .Get \u0026quot;link\u0026quot;}}\u0026lt;/a\u0026gt;{{ end }} {{ if or (or (.Get \u0026quot;title\u0026quot;) (.Get \u0026quot;caption\u0026quot;)) (.Get \u0026quot;attr\u0026quot;)}} \u0026lt;figcaption\u0026gt;{{ if isset .Params \u0026quot;title\u0026quot; }} {{ .Get \u0026quot;title\u0026quot; }}{{ end }} {{ if or (.Get \u0026quot;caption\u0026quot;) (.Get \u0026quot;attr\u0026quot;)}}\u0026lt;p\u0026gt; {{ .Get \u0026quot;caption\u0026quot; }} {{ with .Get \u0026quot;attrlink\u0026quot;}}\u0026lt;a href=\u0026quot;{{.}}\u0026quot;\u0026gt; {{ end }} {{ .Get \u0026quot;attr\u0026quot; }} {{ if .Get \u0026quot;attrlink\u0026quot;}}\u0026lt;/a\u0026gt; {{ end }} \u0026lt;/p\u0026gt; {{ end }} \u0026lt;/figcaption\u0026gt; {{ end }} \u0026lt;/figure\u0026gt; \u0026lt;!-- image --\u0026gt;  Usage #  I simply changed:\n{% image full http://farm5.staticflickr.com/4136/4829260124_57712e570a_o_d.jpg \u0026quot;One of my favorite touristy-type photos. I secretly waited for the good light while we were \u0026quot;having fun\u0026quot; and took this. Only regret: a stupid pole in the top-left corner of the frame I had to clumsily get rid of at post-processing.\u0026quot; -\u0026gt;http://www.flickr.com/photos/alexnormand/4829260124/in/set-72157624547713078/ %}  to this (this example uses a slightly extended version named fig, different than the built-in figure):\n{{% fig class=\u0026quot;full\u0026quot; src=\u0026quot;http://farm5.staticflickr.com/4136/4829260124_57712e570a_o_d.jpg\u0026quot; title=\u0026quot;One of my favorite touristy-type photos. I secretly waited for the good light while we were having fun and took this. Only regret: a stupid pole in the top-left corner of the frame I had to clumsily get rid of at post-processing.\u0026quot; link=\u0026quot;http://www.flickr.com/photos/alexnormand/4829260124/in/set-72157624547713078/\u0026quot; %}}  As a bonus, the shortcode named parameters are, arguably, more readable.\nFinishing touches #  Fix content #  Depending on the amount of customization that was done with each post with Jekyll, this step will require more or less effort. There are no hard and fast rules here except that hugo server --watch is your friend. Test your changes and fix errors as needed.\nClean up #  You'll want to remove the Jekyll configuration at this point. If you have anything else that isn't used, delete it.\nA practical example in a diff #  Hey, it's Alex was migrated in less than a father-with-kids day from Jekyll to Hugo. You can see all the changes (and screw-ups) by looking at this diff.\n"},{"id":4,"href":"/docs/base/entity/","title":"模型、entity与元数据","section":"前端框架基础","content":"模型 #  我们系统的后端是领域模型驱动的。比如下图是预算编制方案的模型，其中包含了很多实体(entity)(蓝色的)。 entity #  一个entity就是一个对象，可以通过模型看到各个属性的名字和类型，以及entity之间的关系。\n我们前端的工作就是为entity制作表单和列表，来创建entity的实例或展示entity的信息。\n元数据 #  前端的元数据主要是对entity的描述。entity的名字、entity的属性名、属性类型等等。\n"},{"id":5,"href":"/docs/base/%E9%A2%84%E7%BD%AE%E6%95%B0%E6%8D%AE/","title":"预置数据","section":"前端框架基础","content":"什么是预置数据 #  预置数据可以理解为软件的出厂自带数据，当用户第一次拿到系统时，就存在于系统中的数据。\n在预置数据的基础上，用户可以对它们进行修改，也可以添加自己的数据。我们把修改和添加的数据叫做用户数据。\n系统中有很多种预置数据。\n比如，菜单、查询方案、列表方案\n用户可以自己新加几个菜单选项。可以修改查询方案中的字段。可以修改列表方案中显示的列、显示的宽度。等等\n预置数据与开发的关系 #  通常，预置数据都会在需求中提到，由产品提供。有些预置数据是后端直接放到数据库里的，前端通过gql取。还有一些是前端在前端开发包里面配置的，这就涉及到了查询方案、列表方案、参照、全局搜索、移动端模板等场景。\n将预置数据预置到系统中 #  开发预置的数据是在当前租户的或登录租户的。系统的其他租户是没有这份预置数据的。所以我们需要有一个将预置数据预置到系统中的操作。\n 记录一下自己预置了什么（表单、老列表、多列表） 把需要预置的数据的信息整理好，发给曾天保同学。其中几个信息如何获取会在下面介绍。  预置表单 环境: release 后端分支: release 预置租户: PSE5KP504EN000F 改了 Project 预置老列表 环境: test 后端分支: feature-budget-iteration-3rd 预置租户: A24SJR50KMK001E 改了 ProjectMemberView 预置多列表 环境: release 后端分支: release 登录租户id: NSKDNT50NVS002J 多列表方案名称: Project_list 预置租户id：在ops的环境信息中，各个环境都会有预置租户id 登录租户id：打开系统，打开开发者工具network，随便选一个请求，其中header中改回有一个租户id，这就是登陆租户id。 "},{"id":6,"href":"/docs/form/what-is-bizform/","title":"什么是BizForm","section":"BizForm基础","content":"Biz是业务的意思，Form是表单的意思，两个词组合起来就是业务表单。业务泛指我们系统要处理的各种业务，比如项目、报销、合同等等。表单比较常见，就是展示或者收集各种信息的页面。这些页面是由前端框架中的BizForm类实现的。\n先看一下我们系统中的表单长什么样。\n这是展示了一个编辑态和一个查看态。 这里只简单的看一个样子，其他文档会介绍更加详细的、各个状态、各个部分的内容。\n"},{"id":7,"href":"/docs/list-guide/%E7%A9%BF%E9%80%8F/","title":"穿透","section":"列表方案攻略","content":"穿透 #  我比较喜欢叫它超链接，就是点击列表上的单元格会跳到其他页面的功能。\n在这里展示了两种需求：\n 会跳到当前单据类型（项目计划）的单据详情页 会跳到其他单据类型（项目）的单据详情页。  代码实现 #    使用rowActionController.makeRowEditAction 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30  class BudgetModelList extends QueryListPagePresenter { { protected getListOption(): IListOption { const listOption = super.getListOption(); return merge(listOption, { gridOption: { actionColumnOption: { visibleSize: 3, }, columnResolver: columnDefs =\u0026gt; { this.projectColumn(columnDefs); columnDefs.forEach(colDef =\u0026gt; { if ( (colDef.field === \u0026#39;code\u0026#39; || colDef.field === \u0026#39;name\u0026#39;) \u0026amp;\u0026amp; checkAuth(\u0026#39;BudgetModel\u0026#39;, FunctionAuthActionType.Update) ) { colDef.cellClass = \u0026#39;object-cell-linkable\u0026#39;; colDef.onCellClicked = event =\u0026gt; { const editAction = this.presenter.listSolutionConnector.rowActionController.makeRowEditAction( undefined, event.data, ); editAction.onClick(event.rowIndex, event.data); }; }  }); }, }, }); } }   其中的makeRowEditAction是去编辑态的单据，可以换成makeRowViewAction实现去查看态。\n  用masterHashResolver这个api，可以指定跳转目标单据的entity。 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30  class TaskPlanListPresenter extends QueryListPagePresenter { getListOption(): IListOption { return { ...super.getListOption(), gridOption: { columnResolver: columnDefs =\u0026gt; { // 将数组转化为map，这个可以不做，直接用find在数组中找到你想找的column  const columnDefsMap = new Map(); columnDefs.forEach(i =\u0026gt; { columnDefsMap.set(i.field, i); }) // 找到column  const projectCode = columnDefsMap.get(\u0026#39;project.code\u0026#39;); // 设置样式和点击事件  projectCode.cellClass = \u0026#39;object-cell-linkable\u0026#39;; projectCode.onCellClicked = event =\u0026gt; { // 实用列表方案的api来实现跳转  this.presenter.listSolutionConnector.rowActionController.masterHashResolver( {name: EN_Project} as Entity, BizListActionEnum.View, {id: event.data.project.id}, event.rowIndex, this.presenter.listSolutionConnector.rowActionController.saveSuccess, );  }; } } } } }  \n  "},{"id":8,"href":"/docs/form/%E7%BB%84%E6%88%90%E9%83%A8%E5%88%86/","title":"BizForm的组成部分","section":"BizForm基础","content":"表单会有不同的状态。\n创建和修改时，表单是可以填写内容的，我们称之为编辑态。\n查看、审批时，不能编辑内容，只能看，我们称之为查看态。\n查看态 #   表单状态 异步任务异常 menu-buttons rang-walk 主表 审批流 子表 ？不知道  "},{"id":9,"href":"/docs/form-guide/%E6%89%93%E5%8D%B0%E6%A8%A1%E6%9D%BF/","title":"打印模板","section":"BizForm实用攻略","content":"打印模板 #  通常可以通过“单据设计”功能设置一个打印模板，但是不知道为什么有些字段无法通过这种方式配到，只能通过代码加出来。\n"},{"id":10,"href":"/docs/form-guide/%E8%A7%86%E5%9B%BE/","title":"视图","section":"BizForm实用攻略","content":"适用于表单。\n 主表presenter的getDataOptions  dynamicViews: { [F_BudgetAccount_refDocMappings(子表名字)]: \u0026#39;viewName(视图名字)\u0026#39;, }, 子表presenter  // 视图的数据 private viewData = observable.array([]); // 查看态 onFormViewed(form: EntityForm\u0026lt;any\u0026gt;, disposers: IDisposer[]) { this.addView(disposers) } // 编辑态 onFormCreated(form: EntityForm\u0026lt;any\u0026gt;, disposers: IDisposer[]) { this.addView(disposers) } addView = (disposers) =\u0026gt; { this.formPresenter.formController.addDynamicView( this.logicPath, \u0026#39;viewName\u0026#39;, this.viewData, ) disposers.push( // 监听子表的数据变化  reaction( () =\u0026gt; { return this.form.select(this.logicPath).value.slice(); }, this.updateData, { fireImmediately: true }, ), ); } // 将子表数据进行处理后赋值给视图数据 updateData = () =\u0026gt; { const data = this.form.select(this.logicPath).value this.viewData.replace(data.filter()); } "},{"id":11,"href":"/docs/common/%E7%BA%BF%E4%B8%8A%E8%B0%83%E8%AF%95/","title":"线上调试","section":"通用功能攻略","content":"线上系统的url后面加?ui-test=t可以让系统加载source map\n"},{"id":12,"href":"/docs/common/entitydatatree/","title":"EntityDataTree","section":"通用功能攻略","content":"寻找自定义该组件中的gql的方法 #  预算项目列表中的左树用了CustomerCategory组件，它又用了CategoryTree组件，其中又用了EntityDataTree组件，其中又用到了CommonProvider类，最终的gql就是在CommonProvider中生成并使用的。\nreturn client .query\u0026lt;{ data: T[] }\u0026gt;({ query: `query{ data: ${queryBuilder.toString()} }` }) "},{"id":13,"href":"/docs/multi-org/%E5%9D%91/","title":"坑","section":"多组织","content":"列表的路由不能传path参数 #  文档里说要用renderDocumentListRouters这个方法生成路由，但是不能传path参数指定url。 它的内部用renderDocumentList和renderMultiOrgDocumentList2个方法生成了一个普通列表路由，一个多组织列表的路由。\n为了解决传path的问题，可以像下面这样写代码。 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32  { ...renderDocumentList({ title: \u0026#39;编制方案设置\u0026#39;, entityName: EN_BudgetModel, groupName: `${EN_BudgetModel}_list`, createPresenter: async options =\u0026gt; { const { BudgetModelList } = await import( \u0026#39;@main/screens/projects/budget/budget-model/list/BudgetModelList\u0026#39; ); return new BudgetModelList({ ...options }); }, }), refreshWhenParamsChanged: true, path: appRouterHashManager.generateHashDef(EN_BudgetModel, PageModeEnum.List),  }, { ...renderMultiOrgDocumentList({ entityName: EN_BudgetModel, groupName: defaultMultiOrgGroupName(EN_BudgetModel), title: `编制方案设置多组织查询`, createPresenter: async options =\u0026gt; { const { BudgetModelList } = await import( \u0026#39;@main/screens/projects/budget/budget-model/list/BudgetModelList\u0026#39; ); return new BudgetModelList({ ...options }); }, }) },   这里就是用renderDocumentList和renderMultiOrgDocumentList分别创建两个路由。\n多组织查询按钮不显示 #  如果列表presenter中有commandActionResolver方法，则需要调一下super方法，否则的话就不会显示出多组织查询按钮。\nconst actions = super.commandActionResolver(commandActions) "},{"id":14,"href":"/docs/form-guide/%E5%A4%96%E9%94%AE%E7%A9%BF%E9%80%8F%E7%9A%84%E8%87%AA%E5%AE%9A%E4%B9%89%E7%82%B9%E5%87%BB%E4%BA%8B%E4%BB%B6/","title":"外键穿透的自定义点击事件","section":"BizForm实用攻略","content":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25  protected onInitialized(formPresenter) { formPresenter.getBean(BeanNames.EventController).on(InternalEvent.onCancel, this.cancel); const isTemplateBill = this.isTemplateBill; if (isTemplateBill) { // 修改外键（项目project）的onClick的穿透的行为。当是计划模板时，穿透到项目模板。  const masterRenderController = this.formPresenter.getBean(BeanNames.MasterRendererController); const billTypeId = this.getBillTypeId(); const options: ForeignKeyLinkRenderOption = { onClick(params: ForeignKeyLinkClickParams) {  if (params.entityName === EN_Project){ const hash = appRouterHashManager.generateHash(\u0026#39;ProjectTemplate\u0026#39;, PageModeEnum.Form as any, { mode: BizFormModeEnum.View, copyId: params.id, id: params.id, data: {}, billTypeId, }); proxyHistory.push(hash) } }, } masterRenderController.add(NewForeignKeyLinkRender(options)) } }   主要是第10行的onClick，可以重新定义外键穿透的默认的onClick。比如穿透到另一个entityName，或者搞一个弹窗。\n"},{"id":15,"href":"/docs/form-guide/%E5%9C%BA%E6%99%AF%E5%80%BCreaction/","title":"场景值reaction","section":"BizForm实用攻略","content":"如果表单的A字段设置了reaction监听。当修改A的value的时候，对应的reaction都会触发。如果希望不触发reaction，就要用到下面的场景值reaction\n// 根据场景值忽略执行的reaction const reactionOmit = this.bizFormPresenter.api.reactionOmitCreator( BizFormScenarios.SourcePicking, ); // 使用reactionOmit监听 disposers.push( reactionOmit( () =\u0026gt; form.select(\u0026#39;F_TimesheetLine_orgRoleType\u0026#39;).value, value =\u0026gt; { } ) ) // 使用reactionOmit对应的场景值赋值，就不会触发reaction this.bizFormPresenter.api.runInScenarios(BizFormScenarios.SourcePicking, () =\u0026gt; { rowField.select(F_TimesheetLine_orgRoleType).value = { id: EN_Department, title: \u0026#39;部门\u0026#39;, name: EN_Department, }; }) "},{"id":16,"href":"/docs/form-guide/%E8%A1%A8%E5%A4%B4%E5%AD%97%E6%AE%B5%E8%87%AA%E5%AE%9A%E4%B9%89%E6%B8%B2%E6%9F%93/","title":"表头字段自定义渲染","section":"BizForm实用攻略","content":"表单中配置masterRender可以实现表头字段的自定义渲染，但是外键字段不能通过masterRender处理。\n在MasterRendererController.tsx中有一段代码\nconst after: IMasterFieldRender[] = [new LinkRender(), new ForeignKeyLinkRender(), new CommonFieldRender()]; 外键字段会走到ForeignKeyLinkRender组件，而masterRender只在CommonFieldRender中才有使用。\nprotected getDisplayOptions(): DisplayOptions { return { masterRender: { [\u0026#39;project\u0026#39;]: props =\u0026gt; { const LinkDiv = styled.div` height: 100%; display: flex; align-items: center; padding-left: 8px; cursor: pointer; color: var(--primary-500); text-decoration: underline; text-underline-position: under; ` return ( \u0026lt;MSTFormElement label={props.template.title} path={\u0026#39;project\u0026#39;} colspan={1} disableError={true} disabled={true} isRequired={false} labelResolver={value =\u0026gt; value[\u0026#39;project\u0026#39;]} // value 对应的 path={...}中的值 contentRenderer={() =\u0026gt; { const data = props.form.value.project return ( \u0026lt;LinkDiv\u0026gt; \u0026lt;span onClick={async () =\u0026gt; { const hash = appRouterHashManager.generateHash(EN_Project, PageModeEnum.Form, { mode: BizFormModeEnum.View, copyId: data.id, id: data.id, data: data, billTypeId: this.formValue.billType.id, queryStringParams: { [F_ProjectSchedule_isTemplateBill]: this.isTemplateBill, }, }); proxyHistory.push(hash) }}\u0026gt;{data.code}\u0026lt;/span\u0026gt; \u0026lt;/LinkDiv\u0026gt; ) }} /\u0026gt; ); }, } } } "},{"id":17,"href":"/docs/list-guide/%E6%8C%89%E9%92%AE%E6%9D%83%E9%99%90/","title":"按钮权限","section":"列表方案攻略","content":"多列表方案处理了顶部按钮的权限，但是要在列表方案中指定resourceId\npublic getQueryListOption(): IQueryListSolutionPresenterOptions { return { ...super.getQueryListOption(), resourceId: \u0026#39;xxxxxxxxxxxxxxx\u0026#39;, }; } "},{"id":18,"href":"/docs/list-guide/queryfield/","title":"QueryField","section":"列表方案攻略","content":"列表数据会查询哪些字段一般是在预置数据里设置的。也可以通过代码控制。\n1 2 3 4 5 6 7 8 9 10 11 12 13  export class ProjectConfirmationListListPresenter extends QueryListPagePresenter { getQueryListOption(): IQueryListSolutionPresenterOptions { return { ...super.getQueryListOption(), resourceId: ResourceConstants.Res_ProjectConfirmation, getDynamicQueryFields: () =\u0026gt; { return [\u0026#39;task.project.id\u0026#39;]; }  }; } }   "},{"id":19,"href":"/docs/list-guide/%E8%A1%8C%E6%8C%89%E9%92%AErowaction/","title":"行按钮rowAction","section":"列表方案攻略","content":"适用于：多列表\n效果图： export class BudgetModelList extends QueryListPagePresenter { // 覆盖父类的方法  getRowActions(rowIndex: number, data: any): IGridAction[] { // 获取公共默认的actions  const actions = this.presenter.listSolutionConnector.rowActionController.makeDefaultRowActions( data, ); if (data \u0026amp;\u0026amp; data.id) { // 加新的按钮  actions.push({ icon: ICON_VIEW, title: \u0026#39;预览\u0026#39;, key: \u0026#39;preview\u0026#39;, onClick: (rowIndex, data) =\u0026gt; this.preview(data), }); } // 还可以对actions数组进行过滤  return actions; } } "},{"id":20,"href":"/docs/form-guide/%E8%87%AA%E5%AE%9A%E4%B9%89%E5%8D%95%E6%8D%AE/","title":"自定义单据","section":"BizForm实用攻略","content":"两部分组成：\n 创建form form组件  function createForm(): EntityForm { const formScheme = { closeDate: { type: FieldTypeEnum.Timestamp, initState: { label: \u0026#39;关闭日期\u0026#39;, required: false, visible: false, }, }, closedReason: { type: FieldTypeEnum.JsonObject, referType: EN_BizReason, initState: { label: \u0026#39;关闭原因\u0026#39;, required: false, visible: false, }, }, closedReasonExplain: { type: FieldTypeEnum.String, initState: { label: \u0026#39;关闭原因说明\u0026#39;, required: false, visible: false, }, }, }; const formBuilder = new FormBuilder(); Object.entries(formScheme).forEach(([key, value]) =\u0026gt; { formBuilder.appendField(key, makeField(value)); }); return formBuilder.toForm({}); } function CloseInfoForm({ form }: { form: EntityForm }) { return ( \u0026lt;MSTFormLayout form={form} columnSize={1}\u0026gt; \u0026lt;MSTFormElement path={\u0026#39;closeDate\u0026#39;} /\u0026gt; \u0026lt;MSTFormElement path=\u0026#34;closedReason\u0026#34;\u0026gt; \u0026lt;Observer\u0026gt; {() =\u0026gt; ( \u0026lt;Refer entityName={EN_BizReason} value={form.value[\u0026#39;closedReason\u0026#39;]} isMulti={false} onChange={value =\u0026gt; { form.select(\u0026#39;closedReason\u0026#39;).value = value; }} /\u0026gt; )} \u0026lt;/Observer\u0026gt; \u0026lt;/MSTFormElement\u0026gt; \u0026lt;MSTFormElement path=\u0026#34;closedReasonExplain\u0026#34; /\u0026gt; \u0026lt;/MSTFormLayout\u0026gt; ); } "},{"id":21,"href":"/docs/list-guide/%E9%80%89%E4%B8%AD%E8%A1%8C/","title":"选中行","section":"列表方案攻略","content":"适用于：多列表方案\nthis.presenter.listSolutionConnector.selectionItems "},{"id":22,"href":"/docs/list-guide/%E9%A1%B6%E9%83%A8%E6%8C%89%E9%92%AE/","title":"顶部按钮ToolbarAction","section":"列表方案攻略","content":"适用于：多列表方案\n效果图： export class ProjectListPagePresenter extends QueryListPagePresenter{ protected commandActionResolver(commandActions: ToolbarAction[]): ToolbarAction[] { // 简单的action  commandActions.unshift({ id: \u0026#39;project-view\u0026#39;, group: ToolbarActionGroup.Group1, action: this.presenter.toolbarConnector.makeCreateButton({ onClick: billTypeId =\u0026gt; { }, }), }); // 复杂的action  commandActions.push(new ProjectMultiCloseAction(this.presenter.listSolutionConnector)) } }  覆盖父类的commandActionResolver方法。向参数commandActions数组中添加ToolbarAction元素即可。 ToolbarAction有两种方式创建。 简单的话，可以用对象字面量创建。 复杂的话，就用一个对象来实现ToolbarAction。参考ProjectMultiCloseAction  "},{"id":23,"href":"/docs/common/gridrowaction%E7%9A%84popover/","title":"GridRowAction的popover","section":"通用功能攻略","content":"多列表方案中\ngetRowActions(rowIndex: number, data: any): IGridAction[] { const actions = this.presenter.listSolutionConnector.rowActionController.makeDefaultRowActions( data, ); const disabledTimeAction = { icon: \u0026#39;icontuichu\u0026#39;, title: \u0026#39;停用日期\u0026#39;, key: \u0026#39;disabledDate\u0026#39;, onClick: () =\u0026gt; {}, popoverRender: () =\u0026gt; { return { content: ( \u0026lt;div /\u0026gt; ), }; }, } } "},{"id":24,"href":"/docs/form-guide/%E7%BC%96%E8%BE%91%E6%88%96%E6%98%BE%E7%A4%BA%E6%95%B0%E5%AD%97%E7%B2%BE%E5%BA%A6/","title":"编辑或显示数字精度","section":"BizForm实用攻略","content":"控制编辑，设置editParams\npublic getEditOptions(): EditOptions { return { editParams: { [主表字段名]: () =\u0026gt; { return { numericProps: { decimalPlaces: 精度, minimumValue: \u0026#39;0\u0026#39;, } } }, [`子表名.子表字段名`]: () =\u0026gt; { return { numericProps: { decimalPlaces: 精度, minimumValue: \u0026#39;0\u0026#39;, } } }, } } } 控制显示，子表要自定义渲染\ngetGridOptions(): Optional\u0026lt;AdvanceGridProps\u0026gt; { return { columnResolver: (colDefs: ColDef[]) =\u0026gt; { const daysField = colDefs.find(c =\u0026gt; c.field === F_TimesheetLine_days); if (daysField) { daysField.cellRendererFramework = (params) =\u0026gt; { return React.createElement(\u0026#39;p\u0026#39;, null, params.data[F_TimesheetLine_days]) } } }, }; } "},{"id":25,"href":"/docs/form-guide/%E6%B0%B4%E5%8D%B0/","title":"水印","section":"BizForm实用攻略","content":"go项目\n trek/services/form-services/middlewares/entities/【实体名】/params.go  // 1. 实体的哪些字段要作为水印 var watermarkFieldNames = []string{ gen_ef.F_Project_billFullStatusObject, gen_ef.F_Project_budgetStatus, } var ( // 2. \twatermarkSettingParams = form_service_middlewares_common.WatermarkSettingMiddlewareCreatorParams{ Items: form_service_middlewares_common.DefaultWatermarkSettingItemsCreator(watermarkFieldNames...), } // 3. \tbillCommonRulesParams = form_service_middlewares_common.BillCommonRulesCreatorParams{ WatermarkSettingMiddlewareCreatorParams: \u0026amp;watermarkSettingParams, } ) trek/services/form-services/middlewares/entities/【实体名】/index.go  func GetMiddlewareCreators() []form_context.FormMiddlewareCreator { middlewareCreators := []form_context.FormMiddlewareCreator{ // 1. \tform_service_middlewares_common.BillCommonRulesMiddlewareCreator(billCommonRulesParams), } } "},{"id":26,"href":"/docs/form/%E5%AD%90%E8%A1%A8/","title":"子表","section":"BizForm基础","content":"formPresenter一般都是在路由中初始化的。业务presenter（都是继承了 EasyBizFormPresenter）的构造器中会调用super，super中会调createItemsPresenters将子表也new出来，让子表保存到 itemsPresenters 中。可以在业务presenter中遍历 itemsPresenters 通过 itemsPresenter 的 logicPath （子表的path）拿到某个子表对象。\n"},{"id":27,"href":"/docs/common/%E6%8F%90%E7%A4%BA/","title":"提示","section":"通用功能攻略","content":"import { showError, showInfo, showSuccess } from \u0026#39;@root/common/toaster\u0026#39;; showSuccess(\u0026#39;text\u0026#39;) 自适应内容高度的提示\n// apps/link/src/main/screens/projects/budget/budget-account/presenter/budget-account-form-presenter/helper.tsx  AlphaWarning( \u0026#39;text\u0026#39;, () =\u0026gt; {}, () =\u0026gt; {}, ); "},{"id":28,"href":"/docs/form-guide/value/","title":"Value","section":"BizForm实用攻略","content":"Presenter.api.formController.form.select('modelSubtables/0/dimensions/2').value\nPresenter.api.formController.form.getSubmitValue()\n"},{"id":29,"href":"/docs/common/%E5%B8%81%E7%A7%8D%E7%B2%BE%E5%BA%A6/","title":"币种精度","section":"通用功能攻略","content":"import { store } from \u0026#39;@models\u0026#39;; // 表单中(EasyBizFormPresenter) this.localCurrency.precision // 不在EasyBizFormPresenter中 store.exchangeDefManager.getLocalCurrency().precision "},{"id":30,"href":"/docs/common/%E5%85%A8%E8%B2%8C%E7%BB%9F%E8%AE%A1%E5%8A%A0%E6%8C%87%E6%A0%87/","title":"全貌统计加指标","section":"通用功能攻略","content":"https://shimo.im/sheets/16q8MDar7Ktv0mk7/cayv7，所有的指标会在这个文档里说明。其中【指标编码】是下文中提到的 MeasureId 。\n需要现在go上配置好指标，然后在前端中获取指标并进行设置。\ngo #   trek/services/dashboard/config/project-overview.go addProjectStatisticsConfig函数 addConfig  // 多值指标 addConfig(\u0026amp;dashboard.EvaluateCardConfig{ Id: \u0026#34;projectTimeStatisticCost\u0026#34;, Title: \u0026#34;工时成本\u0026#34;, Icon: \u0026#34;icongongshi1\u0026#34;, ViewType: dashboard.CardViewType_MultiValue, ValueConfig: []dashboard.EvaluateValueConfig{ { Id: \u0026#34;workingTimeCost\u0026#34;, Icon: \u0026#34;iconzonggongshi\u0026#34;, Title: \u0026#34;总工时成本\u0026#34;, MeasureId: \u0026#34;workingTimeCost\u0026#34;, Unit: dashboard.CardViewUnit_TenThounsand, ClassName: \u0026#34;color1\u0026#34;, SupportPenetrate: true, IsAmount: true, ValuePeriodType: dashboard.MeasurePeriodValueTypeOccurs, }, } }) // 单值指标 addConfig(\u0026amp;dashboard.EvaluateCardConfig{ Id: \u0026#34;workingTimeCost\u0026#34;, Title: \u0026#34;总工时成本\u0026#34;, Icon: \u0026#34;\u0026#34;, ViewType: dashboard.CardViewType_SingleValue, ValueConfig: dashboard.EvaluateValueConfig{ Id: \u0026#34;count\u0026#34;, Icon: \u0026#34;iconzonggongshi\u0026#34;, Title: \u0026#34;总工时成本\u0026#34;, MeasureId: \u0026#34;workingTimeCost\u0026#34;, Unit: dashboard.CardViewUnit_TenThounsand, IsAmount: true, ClassName: \u0026#34;color1\u0026#34;, SupportPenetrate: true, ValuePeriodType: dashboard.MeasurePeriodValueTypeOccurs, }, }) 需要格外注意的几个字段的说明：\n ViewType：单值指标还是多值指标 IsAmount：金额，会受到单位设置（元或万元）影响 Unit：单位，设置为万元，会收到单位设置影响 MeasureId：文章开头提到的指标编码 Id：前端匹配用的id，与 MeasureId 保持一致  前端 #   进入目录apps/link/src/main/screens/projects/project-view/Statistics，将用到 default/constant.ts,default/defaultLayout.ts,Statistics.ts等几个文件。 在 constant.ts 文件中，将go上定义的各个指标的 Id 都定义到 moduleKeys 中。 defaultLayout.ts文件，在defaultMainLayoutWithContract和defaultMainLayout两个数组中分别加指标，并修改contractConfigVersion和configVersion两个版本号。  getSingleDimension({ i: moduleKeys.WorkingTimeCost, x: 2, y: 5, defaultShow: false, }), getMulDimension({ i: moduleKeys.ProjectTimeStatisticCost, x: 0, y: 1, defaultShow: false, }), Statistics.tsx文件，cardList变量，在其中加入各个指标的 Id  "},{"id":31,"href":"/docs/common/%E6%A8%A1%E5%9D%97%E5%90%AF%E7%94%A8/","title":"模块启用","section":"通用功能攻略","content":"go #  go项目，获取功能权限是否开启\nb := ctx.GetBusinessModuleById(gen_ec.EC_BusinessModule_BusinessModule_budget) // b.IsEnabled 前端 #  import { store } from \u0026#39;@models\u0026#39;; class A { b() { const contractModel = store.moduleInitManager.getModuleById(\u0026#39;BusinessModule_contract\u0026#39;); if ( !contractModel || !contractModel.isEnabled ) { // ...  } } } "},{"id":32,"href":"/docs/common/gen/","title":"Gen","section":"通用功能攻略","content":"http://172.31.23.98:8080/job/front-gen/\ngen:\n 在app/go-gen中修改main/index.go中的ApiHost变量为你环境的host，运行gen.sh； 提交代码，部署trek到目标环境； 在jinkens的front-gen中，左边的Build with Parameters生成目标分支、目标环境的web的gen； 获取PR地址，修改remote分支，默认是master，合并代码  问题 #   某些变量在本地跑完gen后不见了  可能是后端该了某些属性的名字，但是0租户没有同步。    "},{"id":33,"href":"/docs/common/%E8%8E%B7%E5%8F%96%E7%B3%BB%E7%BB%9F%E5%8F%82%E6%95%B0/","title":"获取系统参数","section":"通用功能攻略","content":"一 #  先在go上设置需要得系统参数，然后在前端取用。 参考：\n trek/services/form-services/middlewares/entities/time-sheet/index.go apps/link/src/main/screens/projects/time-sheet/form/TimeSheetFormPresenter.tsx  // 这里定义需要查询的系统参数 form_service_middlewares_creators.AppendSystemSettingKeyMiddlewareCreator( form_service_middlewares_creators.AppendSystemSettingKeyParams{ Keys: []string{ gen_ec.EC_Setting_timsheetWeekStarts, gen_ec.EC_Setting_timesheetPrecision, gen_ec.EC_Setting_timsheetDay2Hour, gen_ec.EC_Setting_timesheetCostRateType, gen_ec.EC_Setting_priceScale, }, }, ), this.bizFormPresenter.api.getSystemSetting(\u0026#39;timesheetCostRateType\u0026#39;); 二 #  const key = \u0026#39;timesheetCostRateType\u0026#39;; // 参数名 const settingDataLoader = new DataLoader(EN_Setting, [\u0026#39;values.value\u0026#39;], { criteriaStr: `key=\u0026#39;${key}\u0026#39;`, } as QueryOptions); const data = await settingDataLoader.query(); const result = data[0]; // result.value就是该参数的值  "},{"id":34,"href":"/docs/form-guide/allpaths/","title":"AllPaths","section":"BizForm实用攻略","content":"bizFormPresenter.api.formController.entityCRUD.allPaths bizFormPresenter.api.getForm().select('timesheetLines/0/indvRole') "},{"id":35,"href":"/docs/list-guide/%E6%9F%A5%E8%AF%A2%E6%96%B9%E6%A1%88/%E6%9F%A5%E8%AF%A2%E9%A1%B9%E7%9A%84%E9%BB%98%E8%AE%A4%E5%80%BC/","title":"查询项的默认值","section":"查询方案","content":"这里介绍如何为查询项设置默认值。 参看：trek/services/query-list/middlewares/entities/project-schedule/query-default-value.go\n主要的代码是这段\nfunc (m *billStatusObjectMiddleware) QueryDefHandler(ctx query_list.QueryListContext, api query_list.QueryDefApi) { schema := api.GetQueryItemSchema(billStatusObjectFieldName) if schema != nil { defaultVal := map[string]interface{}{ \u0026#34;values\u0026#34;: []defItem{ { Title: \u0026#34;已生效\u0026#34;, Id: \u0026#34;BillStatus.effective\u0026#34;, }, }, } api.SetDefaultValue(billStatusObjectFieldName, defaultVal) schema.OperatorId = gen_enums.ENUM_CriteriaOperator_in schema.Operator = ctx.GetContext().GetMetadata().GetEnumValue(gen_enums.ENUM_CriteriaOperator, gen_enums.ENUM_CriteriaOperator_in) } } "},{"id":36,"href":"/docs/form-guide/%E5%8D%95%E6%8D%AE%E7%8A%B6%E6%80%81/","title":"单据状态","section":"BizForm实用攻略","content":"export const ENUM_BillStatus = \u0026#34;BillStatus\u0026#34;; // 单据状态 export const ENUM_BillStatus_draft = \u0026#34;BillStatus.draft\u0026#34;; // 未提交 export const ENUM_BillStatus_submitting = \u0026#34;BillStatus.submitting\u0026#34;; // 提交中 export const ENUM_BillStatus_submitted = \u0026#34;BillStatus.submitted\u0026#34;; // 已提交 export const ENUM_BillStatus_approving = \u0026#34;BillStatus.approving\u0026#34;; // 审批中 export const ENUM_BillStatus_effecting = \u0026#34;BillStatus.effecting\u0026#34;; // 生效中 export const ENUM_BillStatus_effective = \u0026#34;BillStatus.effective\u0026#34;; // 已生效 export const ENUM_BillStatus_restarting = \u0026#34;BillStatus.restarting\u0026#34;; // 退回中 export const ENUM_BillStatus_restarted = \u0026#34;BillStatus.restarted\u0026#34;; // 已退回 export const ENUM_BillStatus_recalling = \u0026#34;BillStatus.recalling\u0026#34;; // 撤回中 export const ENUM_BillStatus_recalled = \u0026#34;BillStatus.recalled\u0026#34;; // 已撤回 export const ENUM_BillStatus_closing = \u0026#34;BillStatus.closing\u0026#34;; // 关闭中 export const ENUM_BillStatus_closed = \u0026#34;BillStatus.closed\u0026#34;; // 已关闭 export const ENUM_BillStatus_finishing = \u0026#34;BillStatus.finishing\u0026#34;; // 结案中 export const ENUM_BillStatus_finished = \u0026#34;BillStatus.finished\u0026#34;; // 已结案 export const ENUM_BillStatus_aborting = \u0026#34;BillStatus.aborting\u0026#34;; // 作废中 export const ENUM_BillStatus_aborted = \u0026#34;BillStatus.aborted\u0026#34;; // 已作废 export const ENUM_BillStatus_excepted = \u0026#34;BillStatus.excepted\u0026#34;; // 流程异常 "},{"id":37,"href":"/docs/form-guide/%E5%88%A0%E9%99%A4%E8%A1%8C/","title":"删除行","section":"BizForm实用攻略","content":"const refDocMappingsField = this.form.select(F_BudgetAccount_refDocMappings); if (refDocMappingsField.value !== undefined) { let len = refDocMappingsField.value.length; while (len\u0026gt;0){ this.formController.deleteRowByRealIndex( F_BudgetAccount_refDocMappings, len - 1, ); len --; } } "},{"id":38,"href":"/docs/list-guide/%E6%9F%A5%E8%AF%A2%E6%96%B9%E6%A1%88/%E6%9F%A5%E8%AF%A2%E9%A1%B9/","title":"查询项","section":"查询方案","content":"多列表方案中的 getQueryResolverOptions 方法可以用来设置【查询项】\nclass BudgetPlanBasePresenter extends QueryListPagePresenter { protected getQueryResolverOptions(queryListDef, option): IQueryModelResolverOptions { return { someKey: onModelCreated: (item: QueryItem) =\u0026gt; { item.value } } } } 数据结构\nexport interface IQueryModelResolverOptions { [key: string]: IQueryModelItemResolverOptions | IQueryModelItemResolverCreator; } export type IQueryModelItemResolverCreator = (options) =\u0026gt; IQueryModelItemResolverOptions; export interface IQueryModelItemResolverOptions\u0026lt;T = any\u0026gt; { // 显示查询方案时，每次都会触发  onModelCreated?: (item: QueryItem) =\u0026gt; void; baseFieldOptionsResovler?: ( item: IQueryCriteria, options: FieldOptions, ) =\u0026gt; MSTFormOptions[\u0026#39;fieldOptions\u0026#39;] | FieldOptions; baseTypeResolver?: (item: IQueryCriteria, type: IType\u0026lt;any, any, any\u0026gt;) =\u0026gt; IType\u0026lt;any, any, any\u0026gt;; itemFieldOptionsResolver?: ( item: IQueryCriteria, fieldOptions: MSTFormOptions[\u0026#39;fieldOptions\u0026#39;] | FieldOptions, ) =\u0026gt; MSTFormOptions[\u0026#39;fieldOptions\u0026#39;] | FieldOptions; itemTypeResolver?: (item: IQueryCriteria, modelOptions) =\u0026gt; IType\u0026lt;any, any, any\u0026gt;; parser?: (item: IQueryCriteria\u0026lt;T\u0026gt;) =\u0026gt; any; beforeInitialize?: ( item: IQueryCriteria, gql: GQLQueryCollect, initializers: AsyncInitializer[], queryCriterias: IQueryCriteria[], ) =\u0026gt; Promise\u0026lt;void\u0026gt;; formElementRender?: ( item: QueryItem, commonRender: () =\u0026gt; JSX.Element, filterRender: () =\u0026gt; JSX.Element, ) =\u0026gt; JSX.Element; formElementContentRenderer?: (item: QueryItem) =\u0026gt; JSX.Element; componentRender?: (item: QueryItem) =\u0026gt; JSX.Element; fragmentResolver?: (criteria: ICriteria, item: QueryItem) =\u0026gt; ICriteria; validate?: (field: MSTFormField, item: QueryItem) =\u0026gt; [boolean, string]; // 保存QueryCriteriaValue  toJS?: (value: IQueryCrtieriaValue, item: IQueryCriteria\u0026lt;T\u0026gt;) =\u0026gt; IQueryCrtieriaValue; toHumanString?: (item: QueryItem, operator: string) =\u0026gt; IQueryDescribe; // 值是否为空  isEmptyValue?: (value: IQueryCrtieriaValue, item: QueryItem) =\u0026gt; boolean; } "},{"id":39,"href":"/docs/component/advancedialog/","title":"AdvanceDialog","section":"组件","content":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24  import { showDialog, requestDialogId, closeDialog } from \u0026#39;@root/common/dialog\u0026#39;; import { AdvanceDialog } from \u0026#39;@components/advance-dialog/AdvanceDialog\u0026#39;; function renderDialog() { const dialogId = requestDialogId();  showDialog(dialogId, (  \u0026lt;AdvanceDialog isOpen title=\u0026#34;催办\u0026#34; buttons={[{ text: \u0026#39;确定\u0026#39;, onClick: () =\u0026gt; {  closeDialog(dialogId) } }]} onClose={() =\u0026gt; {  closeDialog(dialogId) }} \u0026gt; \u0026lt;/AdvanceDialog\u0026gt; )) }   列宽可以通过鼠标拖动\nenableColResize={true} autoContainerWidth={false} "},{"id":40,"href":"/docs/list-guide/%E5%88%B7%E6%96%B0%E5%88%97%E8%A1%A8/","title":"刷新列表","section":"列表方案攻略","content":"场景 #  有时我需要刷新列表，比如，在列表上面的工具栏中加个按钮，按钮会搞了一个弹窗出来修改数据；比如，新建了一个单据。\n实现 #  新老列表的presenter中都实现了refresh方法\n"},{"id":41,"href":"/docs/component/refer/","title":"Refer","section":"组件","content":"form中设置 #  getEditOptions之editParams #  editParams是定义每个field（也可以设置子表的field）的编辑态的参数。\n{ [key: fieldName]: 参数对象 } 参数对象需要根据field具体是什么来行确定，比如field可能是数字、字符串、参照等，对应的渲染组件就是NumberField，ReferField，TextField等，参数对象就是对应的渲染组件的参数。\n参数 #  // 高级参照支持多选 enableMultiInsert: true, criteriaStr: criteriaStr, referConfigResolver: referConfig =\u0026gt; { return Object.assign({}, referConfig, { displayField: 'code', }); }, advanceReferProps: { categoryCriteriaStr: , }, queryFields: [], onMultiInsert: ( data: Array\u0026lt;ICustomizedCarryoverProgrammeSubjectSetting\u0026gt;, editRowField: MSTFormField, ) =\u0026gt; { if (Array.isArray(data) \u0026amp;\u0026amp; data.length \u0026gt; 0) { const origin = editRowField.value || []; for (let i = 0, len = data.length; i \u0026lt; len; i += 1) { data[i] = Object.assign(data[i], { summary: origin.summary, }); } } }, enableMultiInsert #  高级参照，多选插入子表。\n在ParamsController中处理它。为true时，会在advanceReferProps中加isMulti和onChange。从而实现了多选自动插入子表。\nif (referParams.enableMultiInsert \u0026amp;\u0026amp; this.presenter.api.isDetailInsertable(detailName)) { referParams[\u0026#39;advanceReferProps\u0026#39;] = Object.assign({}, referParams[\u0026#39;advanceReferProps\u0026#39;], { isMulti: true, onChange: value =\u0026gt; { this.detailController.onAdvanceReferMultipleSelect( detailName, colFieldName, value, rowIndex, referParams, ); }, }); "},{"id":42,"href":"/docs/common/%E4%B8%9A%E5%8A%A1%E8%A7%84%E5%88%99/","title":"获取业务规则","section":"通用功能攻略","content":"方式一 #  class ProjectFormPresenter extends EasyBizFormPresenter\u0026lt;IProject\u0026gt;{ private billTypeRules: Array\u0026lt;IBizProcessFuncUnitSetting\u0026gt; = []; xx() { const businessRules = this.bizFormPresenter.api.getBusinessRules() this.billTypeRules = oc(businessRules).rules([]) } } 方式二 #  import { FuncUnit_Constants } from \u0026#39;@q7/athena-gen/src\u0026#39;; class ProjectPlanButton extends MenuButton { private checkEnableProjectRule = () =\u0026gt; { const enableProject: IBizProcessFuncUnitSetting = this.presenter.api.getBusinessRuleById( FuncUnit_Constants.enableProjectScheduleValidator, ); if (enableProject) { return enableProject.setting; } return; }; } 其中FuncUnit_Constants是根据预置数据生成的，可以问后端你要的业务规则的名字。\n业务规则的类型 #  interface IBizProcessFuncUnitSetting { applyTo?: { [key: string]: any } // 应用的对象, \tapplyToTypeObject?: IEnumValue // 应用对象类型, \tbillIoType?: IEnumValue // 单据方向, \tbillType?: IBillType // 单据类型, \tbizObjectInfoWs?: string // 业务对象信息, \tbusinessType?: IBusinessType // 业务类型, \tcreatedTime?: number // 创建时间, \tcreatedUser?: IUser // 创建人, \tcriteria?: { [key: string]: any } // 条件, \tcustomizedFields?: { [key: string]: any } // 自定义属性, \tdataObject?: IObjectType // 对象类型, \tdataVersion?: number // 数据版本, \telseSetting?: { [key: string]: any } // 其他的值, \tentrySrcSystem?: IEnumValue // 数据来源类型, \texternalObjectId?: string // 外部系统唯一标识, \texternalObjectType?: string // 外部系统对象类型, \texternalSystemCode?: string // 外部系统标识, \tfuncUnitBillOfBizProcess?: string // 业务过程处理单元, \tfuncUnit?: IFuncUnit // 功能部件, \tid?: string // ID, \tisDeleted?: boolean // 是否为删除数据, \tisInitData?: boolean // 是否为预置数据, \tisSystem?: boolean // 是否为系统数据, \tlastModifiedTime?: number // 最后修改时间, \tlastModifiedUser?: IUser // 最后修改人, \tlastRequestId?: string // 最后一次更新请求的requestId, \tlistFieldName?: string // 应用的列表字段名, \tmodifiedTime?: number // 修改时间, \tmodifiedUser?: IUser // 修改人, \tobjectTypeObject?: IObjectType // 对象类型, \toverrideModeObject?: IEnumValue // 重载模式, \tsetting?: { [key: string]: any } // 设置, \tsettingDisplayInfo?: string // 描述, \tsourceBillIoType?: IEnumValue // 允许来源的单据方向, \tsourceBillType?: IBillType // 允许来源的单据类型, \tsourceBusinessType?: IBusinessType // 允许来源的业务类型, \tsourceObjectTypeObject?: IObjectType // 允许来源的对象类型, \tuiOption?: { [key: string]: any } // 前端保存的值 } "},{"id":43,"href":"/docs/form-guide/init-form/","title":"创建form时带默认数据","section":"BizForm实用攻略","content":"场景 #  在新建”项目“时，选择了项目分类后点新建，所选择的分类会出现在表单的”项目分类“中。\n 选择分类 点新建  自动填写了“项目分类”   怎么实现 #    在跳转页面时，将需要的参数放入proxyHistory.push的第二个参数passParams中。 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26  class ProjectListPagePresenter extends QueryListPagePresenter\u0026lt; IProjectListPagePresenterOption \u0026gt;{ protected commandActionResolver(commandActions: ToolbarAction[]): ToolbarAction[] { commandActions.unshift({ id: \u0026#39;project-view\u0026#39;, group: ToolbarActionGroup.Group1, action: this.presenter.toolbarConnector.makeCreateButton({ onClick: billTypeId =\u0026gt; { const hash = appRouterHashManager.generateHash(EN_Project, PageModeEnum.Form, { mode: BizFormModeEnum.Create, billTypeId: billTypeId, extraParams: { isBase: this.isBase, }, }); proxyHistory.push(hash, { onSuccess: this.presenter.refresh, category: this.category.curParent,  }); }, }), }); return commandActions; } }  \n  passParams中的数据会放到formPresenter的option中，取出使用即可。 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27  class ProjectFormPresenter extends EasyBizFormPresenter\u0026lt;IProject\u0026gt; { private options: IEasyBizFormPresenterOptions;  constructor(options: IEasyBizFormPresenterOptions, private isBase?: boolean) { super(EN_Project, options); this.options = options;  } @autobind protected onFormCreated(form: EntityForm\u0026lt;IProject\u0026gt;, disposers: Lambda[]) { // ...  const stageGroup = form.select(F_Project_stageGroup); if (stageGroup \u0026amp;\u0026amp; stageGroup.required) { form.select(F_Project_enableStage).value = true; } if (this.opotions.passParams.category) { form.select(F_Project_category).value = this.options.passParams.category;  } if (this.bizFormPresenter.api.mode === \u0026#39;Copy\u0026#39;) { const clearFields = [ \u0026#39;startDate\u0026#39;, \u0026#39;closedDate\u0026#39;, \u0026#39;changedReason\u0026#39;, \u0026#39;lastChangedTime\u0026#39;, // ...  } }  \n  "},{"id":44,"href":"/docs/component/tablist/","title":"Tab List","section":"组件","content":"\u0026lt;TabList focusIndex={this.focusIndex} onTabChange={index =\u0026gt; { }} \u0026gt; \u0026lt;Tab key={1} title=\u0026#34;编码方案\u0026#34; /\u0026gt; \u0026lt;Tab key={2} title=\u0026#34;对照码\u0026#34; /\u0026gt; \u0026lt;/TabList\u0026gt; "},{"id":45,"href":"/posts/goisforlovers/","title":"(Hu)go Template Primer","section":"Blog","content":"Hugo uses the excellent Go html/template library for its template engine. It is an extremely lightweight engine that provides a very small amount of logic. In our experience that it is just the right amount of logic to be able to create a good static website. If you have used other template systems from different languages or frameworks you will find a lot of similarities in Go templates.\nThis document is a brief primer on using Go templates. The Go docs provide more details.\nIntroduction to Go Templates #  Go templates provide an extremely simple template language. It adheres to the belief that only the most basic of logic belongs in the template or view layer. One consequence of this simplicity is that Go templates parse very quickly.\nA unique characteristic of Go templates is they are content aware. Variables and content will be sanitized depending on the context of where they are used. More details can be found in the Go docs.\nBasic Syntax #  Golang templates are HTML files with the addition of variables and functions.\nGo variables and functions are accessible within {{ }}\nAccessing a predefined variable \u0026quot;foo\u0026quot;:\n{{ foo }}  Parameters are separated using spaces\nCalling the add function with input of 1, 2:\n{{ add 1 2 }}  Methods and fields are accessed via dot notation\nAccessing the Page Parameter \u0026quot;bar\u0026quot;\n{{ .Params.bar }}  Parentheses can be used to group items together\n{{ if or (isset .Params \u0026quot;alt\u0026quot;) (isset .Params \u0026quot;caption\u0026quot;) }} Caption {{ end }}  Variables #  Each Go template has a struct (object) made available to it. In hugo each template is passed either a page or a node struct depending on which type of page you are rendering. More details are available on the variables page.\nA variable is accessed by referencing the variable name.\n\u0026lt;title\u0026gt;{{ .Title }}\u0026lt;/title\u0026gt;  Variables can also be defined and referenced.\n{{ $address := \u0026quot;123 Main St.\u0026quot;}} {{ $address }}  Functions #  Go template ship with a few functions which provide basic functionality. The Go template system also provides a mechanism for applications to extend the available functions with their own. Hugo template functions provide some additional functionality we believe are useful for building websites. Functions are called by using their name followed by the required parameters separated by spaces. Template functions cannot be added without recompiling hugo.\nExample:\n{{ add 1 2 }}  Includes #  When including another template you will pass to it the data it will be able to access. To pass along the current context please remember to include a trailing dot. The templates location will always be starting at the /layout/ directory within Hugo.\nExample:\n{{ template \u0026quot;chrome/header.html\u0026quot; . }}  Logic #  Go templates provide the most basic iteration and conditional logic.\nIteration #  Just like in Go, the Go templates make heavy use of range to iterate over a map, array or slice. The following are different examples of how to use range.\nExample 1: Using Context\n{{ range array }} {{ . }} {{ end }}  Example 2: Declaring value variable name\n{{range $element := array}} {{ $element }} {{ end }}  Example 2: Declaring key and value variable name\n{{range $index, $element := array}} {{ $index }} {{ $element }} {{ end }}  Conditionals #  If, else, with, or, \u0026amp; and provide the framework for handling conditional logic in Go Templates. Like range, each statement is closed with end.\nGo Templates treat the following values as false:\n false 0 any array, slice, map, or string of length zero  Example 1: If\n{{ if isset .Params \u0026quot;title\u0026quot; }}\u0026lt;h4\u0026gt;{{ index .Params \u0026quot;title\u0026quot; }}\u0026lt;/h4\u0026gt;{{ end }}  Example 2: If -\u0026gt; Else\n{{ if isset .Params \u0026quot;alt\u0026quot; }} {{ index .Params \u0026quot;alt\u0026quot; }} {{else}} {{ index .Params \u0026quot;caption\u0026quot; }} {{ end }}  Example 3: And \u0026amp; Or\n{{ if and (or (isset .Params \u0026quot;title\u0026quot;) (isset .Params \u0026quot;caption\u0026quot;)) (isset .Params \u0026quot;attr\u0026quot;)}}  Example 4: With\nAn alternative way of writing \u0026quot;if\u0026quot; and then referencing the same value is to use \u0026quot;with\u0026quot; instead. With rebinds the context . within its scope, and skips the block if the variable is absent.\nThe first example above could be simplified as:\n{{ with .Params.title }}\u0026lt;h4\u0026gt;{{ . }}\u0026lt;/h4\u0026gt;{{ end }}  Example 5: If -\u0026gt; Else If\n{{ if isset .Params \u0026quot;alt\u0026quot; }} {{ index .Params \u0026quot;alt\u0026quot; }} {{ else if isset .Params \u0026quot;caption\u0026quot; }} {{ index .Params \u0026quot;caption\u0026quot; }} {{ end }}  Pipes #  One of the most powerful components of Go templates is the ability to stack actions one after another. This is done by using pipes. Borrowed from unix pipes, the concept is simple, each pipeline's output becomes the input of the following pipe.\nBecause of the very simple syntax of Go templates, the pipe is essential to being able to chain together function calls. One limitation of the pipes is that they only can work with a single value and that value becomes the last parameter of the next pipeline.\nA few simple examples should help convey how to use the pipe.\nExample 1 :\n{{ if eq 1 1 }} Same {{ end }}  is the same as\n{{ eq 1 1 | if }} Same {{ end }}  It does look odd to place the if at the end, but it does provide a good illustration of how to use the pipes.\nExample 2 :\n{{ index .Params \u0026quot;disqus_url\u0026quot; | html }}  Access the page parameter called \u0026quot;disqus_url\u0026quot; and escape the HTML.\nExample 3 :\n{{ if or (or (isset .Params \u0026quot;title\u0026quot;) (isset .Params \u0026quot;caption\u0026quot;)) (isset .Params \u0026quot;attr\u0026quot;)}} Stuff Here {{ end }}  Could be rewritten as\n{{ isset .Params \u0026quot;caption\u0026quot; | or isset .Params \u0026quot;title\u0026quot; | or isset .Params \u0026quot;attr\u0026quot; | if }} Stuff Here {{ end }}  Context (aka. the dot) #  The most easily overlooked concept to understand about Go templates is that {{ . }} always refers to the current context. In the top level of your template this will be the data set made available to it. Inside of a iteration it will have the value of the current item. When inside of a loop the context has changed. . will no longer refer to the data available to the entire page. If you need to access this from within the loop you will likely want to set it to a variable instead of depending on the context.\nExample:\n {{ $title := .Site.Title }} {{ range .Params.tags }} \u0026lt;li\u0026gt; \u0026lt;a href=\u0026quot;{{ $baseurl }}/tags/{{ . | urlize }}\u0026quot;\u0026gt;{{ . }}\u0026lt;/a\u0026gt; - {{ $title }} \u0026lt;/li\u0026gt; {{ end }}  Notice how once we have entered the loop the value of {{ . }} has changed. We have defined a variable outside of the loop so we have access to it from within the loop.\nHugo Parameters #  Hugo provides the option of passing values to the template language through the site configuration (for sitewide values), or through the meta data of each specific piece of content. You can define any values of any type (supported by your front matter/config format) and use them however you want to inside of your templates.\nUsing Content (page) Parameters #  In each piece of content you can provide variables to be used by the templates. This happens in the front matter.\nAn example of this is used in this documentation site. Most of the pages benefit from having the table of contents provided. Sometimes the TOC just doesn't make a lot of sense. We've defined a variable in our front matter of some pages to turn off the TOC from being displayed.\nHere is the example front matter:\n--- title: \u0026quot;Permalinks\u0026quot; date: \u0026quot;2013-11-18\u0026quot; aliases: - \u0026quot;/doc/permalinks/\u0026quot; groups: [\u0026quot;extras\u0026quot;] groups_weight: 30 notoc: true --- Here is the corresponding code inside of the template:\n {{ if not .Params.notoc }} \u0026lt;div id=\u0026quot;toc\u0026quot; class=\u0026quot;well col-md-4 col-sm-6\u0026quot;\u0026gt; {{ .TableOfContents }} \u0026lt;/div\u0026gt; {{ end }}  Using Site (config) Parameters #  In your top-level configuration file (eg, config.yaml) you can define site parameters, which are values which will be available to you in chrome.\nFor instance, you might declare:\nparams: CopyrightHTML: \u0026#34;Copyright \u0026amp;#xA9; 2013 John Doe. All Rights Reserved.\u0026#34; TwitterUser: \u0026#34;spf13\u0026#34; SidebarRecentLimit: 5 Within a footer layout, you might then declare a \u0026lt;footer\u0026gt; which is only provided if the CopyrightHTML parameter is provided, and if it is given, you would declare it to be HTML-safe, so that the HTML entity is not escaped again. This would let you easily update just your top-level config file each January 1st, instead of hunting through your templates.\n{{if .Site.Params.CopyrightHTML}}\u0026lt;footer\u0026gt; \u0026lt;div class=\u0026quot;text-center\u0026quot;\u0026gt;{{.Site.Params.CopyrightHTML | safeHtml}}\u0026lt;/div\u0026gt; \u0026lt;/footer\u0026gt;{{end}} An alternative way of writing the \u0026quot;if\u0026quot; and then referencing the same value is to use \u0026quot;with\u0026quot; instead. With rebinds the context . within its scope, and skips the block if the variable is absent:\n{{with .Site.Params.TwitterUser}}\u0026lt;span class=\u0026quot;twitter\u0026quot;\u0026gt; \u0026lt;a href=\u0026quot;https://twitter.com/{{.}}\u0026quot; rel=\u0026quot;author\u0026quot;\u0026gt; \u0026lt;img src=\u0026quot;/images/twitter.png\u0026quot; width=\u0026quot;48\u0026quot; height=\u0026quot;48\u0026quot; title=\u0026quot;Twitter: {{.}}\u0026quot; alt=\u0026quot;Twitter\u0026quot;\u0026gt;\u0026lt;/a\u0026gt; \u0026lt;/span\u0026gt;{{end}} Finally, if you want to pull \u0026quot;magic constants\u0026quot; out of your layouts, you can do so, such as in this example:\n\u0026lt;nav class=\u0026quot;recent\u0026quot;\u0026gt; \u0026lt;h1\u0026gt;Recent Posts\u0026lt;/h1\u0026gt; \u0026lt;ul\u0026gt;{{range first .Site.Params.SidebarRecentLimit .Site.Recent}} \u0026lt;li\u0026gt;\u0026lt;a href=\u0026quot;{{.RelPermalink}}\u0026quot;\u0026gt;{{.Title}}\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; {{end}}\u0026lt;/ul\u0026gt; \u0026lt;/nav\u0026gt; "},{"id":46,"href":"/posts/hugoisforlovers/","title":"Getting Started with Hugo","section":"Blog","content":"Step 1. Install Hugo #  Go to Hugo releases and download the appropriate version for your OS and architecture.\nSave it somewhere specific as we will be using it in the next step.\nMore complete instructions are available at Install Hugo\nStep 2. Build the Docs #  Hugo has its own example site which happens to also be the documentation site you are reading right now.\nFollow the following steps:\n Clone the Hugo repository Go into the repo Run hugo in server mode and build the docs Open your browser to http://localhost:1313  Corresponding pseudo commands:\ngit clone https://github.com/spf13/hugo cd hugo /path/to/where/you/installed/hugo server --source=./docs \u0026gt; 29 pages created \u0026gt; 0 tags index created \u0026gt; in 27 ms \u0026gt; Web Server is available at http://localhost:1313 \u0026gt; Press ctrl+c to stop  Once you've gotten here, follow along the rest of this page on your local build.\nStep 3. Change the docs site #  Stop the Hugo process by hitting Ctrl+C.\nNow we are going to run hugo again, but this time with hugo in watch mode.\n/path/to/hugo/from/step/1/hugo server --source=./docs --watch \u0026gt; 29 pages created \u0026gt; 0 tags index created \u0026gt; in 27 ms \u0026gt; Web Server is available at http://localhost:1313 \u0026gt; Watching for changes in /Users/spf13/Code/hugo/docs/content \u0026gt; Press ctrl+c to stop  Open your favorite editor and change one of the source content pages. How about changing this very file to fix the typo. How about changing this very file to fix the typo.\nContent files are found in docs/content/. Unless otherwise specified, files are located at the same relative location as the url, in our case docs/content/overview/quickstart.md.\nChange and save this file.. Notice what happened in your terminal.\n\u0026gt; Change detected, rebuilding site \u0026gt; 29 pages created \u0026gt; 0 tags index created \u0026gt; in 26 ms  Refresh the browser and observe that the typo is now fixed.\nNotice how quick that was. Try to refresh the site before it's finished building. I double dare you. Having nearly instant feedback enables you to have your creativity flow without waiting for long builds.\nStep 4. Have fun #  The best way to learn something is to play with it.\n"},{"id":47,"href":"/docs/component/grid/","title":"Grid","section":"组件","content":"grid #  grid是前端解决子表和列表的方案，对应的组件是AdvanceGird。\neditOptions #  editOptions下面的editParams会传给单元格的渲染组件\n表单 #  "},{"id":48,"href":"/docs/list-guide/%E8%99%9A%E6%8B%9F%E5%AD%97%E6%AE%B5/%E6%9F%A5%E8%AF%A2%E6%96%B9%E6%A1%88/","title":"查询方案","section":"虚拟字段","content":"a #  "},{"id":49,"href":"/docs/form/mstform/","title":"MSTForm-Form状态管理","section":"BizForm基础","content":"随着应用复杂度提升，现在不可避免的就是数据状态管理，现在有很多流行框架，redux、mobx、rxjs等等。不同的解决方案在不同场景下会有明显的优劣势，而我们要做的，就是根据场景来选择合适的方案。\n首先，在我们的应用中，我们聚焦到有大量用户输入的表单场景下，我们有以下硬性需求：\n 维护用户录入的字段值； 不同的字段之间有联动关系，修改一个会导致另外一个发生改变； 不同的字段之间，状态会相互影响，修改一个会导致另外一个不可编辑； 表单要支持校验；  由这些需求可以看到，在这种场景下，数据驱动方式的 mobx 是最佳的解决方案，我们可以通过 observable data + control component 来实现双向同步的 UI 组件。这样就解决了一个字段同步的问题。\n同样，当表单复杂以后，我们更倾向于使用树形结构来管理我们的表单数据。\n综上，我们选用了 mobx-state-tree 作为底层框架，来对表单的数据进行管理。\n同时，我们使用 MSTForm 对 mobx-state-tree 进行扩展，使得每一个数据节点（叶子节点）都从一个 value，变成了带有 ui 状态的对象。\n总结一下，MSTForm 是一个用 树形结构 对表单数据进行管理，并使得每一个数据项（即叶子节点）拥有 ui 状态（disabled、readonly、validator、hasError、errorMessage等等）的解决方案。\nselect #  对于 MSTForm 来说，最重要的 api 就是 select，select 会返回一个 MSTFormField，MSTFormField 是通过代理模式实现的对原叶子节点封装的带有 ui 状态的操作对象。\n编程模式的转变 #  带我们使用 MSTForm 对 表单数据进行封装后，我们会发现，以前针对 ui 层面的操作，现在都会被转化为针对数据状态的操作，即我们提升了数据状态的层级，以更加纯净的方式来书写代码，而数据状态 和 真正 ui 层面的更新，则被封装到了更底层的 Level 中。\n从而，我们实现了从 面向UI编程 到 面向数据状态编程 的过度。\n"},{"id":50,"href":"/docs/form-guide/menu-button/menu-%E4%BF%AE%E6%94%B9button/","title":"修改Menu中的Button","section":"Menu Button","content":"向Menu中添加Button #  此攻略会向你介绍如何往查看态的menu中加一个按钮\n已有按钮添加到menu中 #  class xxFormPresenter extends EasyBizFormPresenter { protected getMenuOptions(): MenuOptions { const menus = super.getMenuOptions().menus; // 删改menus数组  return menus; } } 在这里修改menus数组就可以了。\n可以直接往里面添加按钮。也可能要根据权限、是不是变更单等条件过滤掉一些按钮。\n"},{"id":51,"href":"/docs/list-guide/%E8%99%9A%E6%8B%9F%E5%AD%97%E6%AE%B5/%E5%88%97%E8%A1%A8/","title":"列表中显示虚拟字段列","section":"虚拟字段","content":"配置虚拟字段 #  列表方案是按一定的条件查出一个列表。这个条件在我们的系统中就是“查询方案”。\n我们查询数据是通过 gql 实现的，查询方案最终会转化为 criteriaStr。\n 进入到开发包中的列表方案。通过 + 加号，就可以添加不同的查询条件。   列表方案都是针对一个entity的，所以查询方案也是针对这个entity的。添加的查询条件根据entity上是否存在field分为两种情况。 其中显示项就是entity上已经存在的field，就是下图这样的。 而虚拟字段就是entity上没有你想要的field作为条件。 需要注意。在这个配置界面，“显示名称”需要先填写英文，确定以后再改成中文，因为我们需要“字段名称”是英文，要在后面的开发中用到。而在最初的配置中的“显示名称”会作为“字段名称”，且字段名称不能修改。 参照和枚举根据需要选择即可。\n虚拟字段的代码开发 #  每个查询条件在最后都会转化成 criteriaStr 片段，最后组装成一个大的 criteriaStr 。对于非虚拟字段，可以通过通用的方式去处理的。虚拟字段需要我们写代码来转化为 criteriaStr 。\n首先，假设你已经配置好了一个虚拟字段abc。然后就要在goServer上对它进行处理了。\n找到目录trek/services/query-list/middlewares/entities，看有没有你的entity的目录，如果没有就创建一个。这里以budget-control-rule-set为例 需要index.go文件和各个虚拟字段.go文件。 index.go文件如下： 每个虚拟字段需要在这里声明。\n虚拟字段.go 这里是 rule-remarks.go ： 把这里面的 ruleRemarks 都替换成你的自定义的字段（比如abc）。\n  12行，声明字段用来接收查询的值。\n  27行，存储查询的值。枚举会传过来选择的枚举的id，字符串就是字符串本体，区间就会有两个值。\n  字符串、枚举：   区间：     33行是查询语句。根据自己的业务，会不一样，它会作为该虚拟字段的子criteriaStr拼到完整的criteriaStr中。\n  "},{"id":52,"href":"/docs/common/%E5%8A%9F%E8%83%BD%E6%9D%83%E9%99%90/","title":"功能权限","section":"通用功能攻略","content":"实现 #  使用下面的代码就可以做到查看功能权限\nimport { checkAuth } from \u0026#39;@root/func-auth\u0026#39;; import { FunctionAuthActionType } from \u0026#39;@metadata\u0026#39;; checkAuth(EN_Project, FunctionAuthActionType.View) checkAuth方法 #  checkAuth方法的参数：\n   参数 描述     resourceId 资源id   actionType 权限类型，有新增、查看、导出、打印等等    resourceId可能是entityId，也可能是另外定义的resourceId，在文件packages/athena-gen/src/entity-constants/ResourceConstants.ts中。具体是哪个需要和后端确认。\nactionType的定义在文件apps/link/node_modules/@q7/metadata/src/declare/constants.ts中。摘录到下面。\n/** * 功能权限 Action 集合 */ export enum FunctionAuthActionType { // 新增  Add = \u0026#39;add\u0026#39;, // 查看  View = \u0026#39;view\u0026#39;, // 修改  Update = \u0026#39;update\u0026#39;, // 删除  Delete = \u0026#39;delete\u0026#39;, // 输出  Export = \u0026#39;export\u0026#39;, // 打印  Print = \u0026#39;print\u0026#39;, // 作废  Abort = \u0026#39;abort\u0026#39;, // 弃审  Unapprove = \u0026#39;unapprove\u0026#39;, // 审评  Approve = \u0026#39;approve\u0026#39;, // 执行  Execute = \u0026#39;execute\u0026#39;, // 挂起  Suspend = \u0026#39;suspend\u0026#39;, // 取消挂起  CancelSuspend = \u0026#39;cancelSuspend\u0026#39;, // 关闭  Close = \u0026#39;close\u0026#39;, // 打开  Open = \u0026#39;open\u0026#39;, // 预览  Preview = \u0026#39;preview\u0026#39;, // 附件上传  AttachemetUpload = \u0026#39;attachemetUpload\u0026#39;, // 附件删除  AttachmentDelete = \u0026#39;attachmentDelete\u0026#39;, // 附件预览  AttachmentView = \u0026#39;attachmentView\u0026#39;, // 发布  Publish = \u0026#39;publish\u0026#39;, // 设置  Setup = \u0026#39;setup\u0026#39;, // 变更  Change = \u0026#39;change\u0026#39;, } "},{"id":53,"href":"/docs/common/%E6%8E%A5%E5%8F%A3/","title":"后端的接口","section":"通用功能攻略","content":"之所以叫“后端的接口”是为了与“go的接口”区分开。\n因为前端只能访问到go不能直接访问到后端，所以后端提供的接口，只能通过go访问。那么就要在go上加一个接口，前端访问go的接口，go访问后端的接口。\n下面介绍一下实现一个go接口的步骤。\n一、声明后端接口地址 #  在文件 trek/urls/url.go 中声明接口地址\n比如这样\n// 批量设置执行指标 \tBudgetBatchSetIndicators := BudgetHost + \u0026#34;/baseapp/BudgetAccount/batchSetIndicators\u0026#34; 其中的 BudgetHost 是服务的地址，可以在文件的开头看到，它是根据具体的服务会有所不同的。\n二、添加go的接口 #  找到文件 trek/web/controllers/web-controllers/transparent/index.go\n1. 在 BeforeActivation 方法中创建go的接口 #  1 2 3 4 5  func (c *transparentController) BeforeActivation(b mvc.BeforeActivation) { // ...  b.Handle(iris.MethodPost, \u0026#34;/BudgetAccount/batchSetIndicators\u0026#34;, \u0026#34;BudgetAccountBatchSetIndicators\u0026#34;)  // ... }   其中b.Handle 方法的三个参数分别是\n http method go接口url（前端访问的url） go接口的处理函数  2. 实现“处理函数” #  在上面提到的BeforeActivation方法下面，创建一个与它同级的方法，也就是接口处理函数，内容就是直接给后端发起一个请求。\n其中第11行是第一步中声明的后端url地址 1 2 3 4 5 6 7 8 9 10 11 12  func (c *transparentController) BeforeActivation(b mvc.BeforeActivation) { // ...  b.Handle(iris.MethodPost, \u0026#34;/BudgetAccount/batchSetIndicators\u0026#34;, \u0026#34;BudgetAccountBatchSetIndicators\u0026#34;) // ... } func (c *transparentController) BudgetAccountBatchSetIndicators() interface{} { return Fetch(c, context.TFetchOption{ Method: \u0026#34;post\u0026#34;, Url:\turls.BudgetBatchSetIndicators, }) }  \n三、前端调接口 #  找到文件 apps/link/src/api/urls.ts\n1 2 3 4 5 6 7 8 9 10 11 12 13  budgetControlRule: { batchEnable: `${ApiHost}/BudgetControlRule/batchEnable`, enable: `${ApiHost}/BudgetControlRule/enable`, }, budgetAccount: { batchSetIndicators: `${ApiHost}/BudgetAccount/batchSetIndicators`  }, // 资产管理  asset: { // 获取资产卡片建卡日期的可选范围  getAssetBusinessDateRange: `${ApiHost}/asset/getAssetBusinessDateRange`, // 获取变动单或处置单业务日期的可选范围  getBusinessDateRange: `${ApiHost}/asset/getBusinessDateRange`,   经过上面的3步麻烦的操作，终于可以调接口了\nimport client from \u0026#39;@client\u0026#39;; import { urls } from \u0026#39;@root/api\u0026#39;; ... client.post(urls.budgetAccount.batchSetIndicators, data); ... "},{"id":54,"href":"/docs/design/%E5%A6%82%E4%BD%95%E5%81%9A%E8%AF%A6%E8%AE%BE/","title":"如何做详设","section":"设计","content":"一个功能如何实现？\n 改旧的功能  原来怎么实现的 数据从自哪个entity、哪个字段？进行了哪些拼装、组合、转换？   新的功能  公共的支持吗？  用过吗？  怎么用？     非标的吗？如何设计？  如何管理状态、数据？ 数据从自哪个entity、哪个字段？需要拼装、组合、转换吗？ 有哪些数据需要展示？ 哪些数据分给哪个组件？ 组件  能使用哪些公共组件？ 组件需要的参数 内部需要管理状态吗？   保存数据时需要转换数据吗？ 回显时需要转换数据吗？      "},{"id":55,"href":"/docs/list-guide/%E8%99%9A%E6%8B%9F%E5%AD%97%E6%AE%B5/%E5%AF%BC%E5%87%BA/","title":"导出","section":"虚拟字段","content":"适用场景：列表中有虚拟字段、自定义渲染的字段\n参考：trek/services/query-list/middlewares/entities/budget-model/report-expression.go\n其中的ReportExpression是打印和导出时用到的sql，\n"},{"id":56,"href":"/docs/common/%E6%95%B0%E6%8D%AE%E6%9D%83%E9%99%90/","title":"数据权限","section":"通用功能攻略","content":"前端的gql默认是会按数据权限过滤的。\n如果想忽略数据权限的话，需要在option中加contextObject参数，当这个参数是不在数据权限范围内的实体时，就表示忽略数据权限。\n所以这里以ignoreDataAuth字符串为参数，来达到忽略权限的目的。\n1 2 3 4 5  const dataLoader = new DataLoader(EN_BudgetPlan, [\u0026#39;id\u0026#39;], { criteriaStr: `projectId=\u0026#39;${this.projectId}\u0026#39;`, sorts: [{ name: \u0026#39;createdTime\u0026#39;, isDesending: true }], contextObject: \u0026#39;ignoreDataAuth\u0026#39;, } as IDataLoaderQueryOptions);   "},{"id":57,"href":"/docs/form-guide/menu-button/menu-%E6%96%B0%E5%BB%BAbutton/","title":"新建一个MenuButton","section":"Menu Button","content":"向Menu中添加Button #  此攻略会向你介绍如何往查看态表单的menu中加一个按钮\n新建一个menu按钮 #  按下面的步骤就可以创建一个按钮，并把它加到menu中\n 按钮的名字 按钮的Creator函数 声明按钮 声明分组 添加到menu中  给搞一个名字 #  在 apps/link/src/solutions/biz-form/page/menu-buttons/declare.ts 文件中在BizFormMenuButtons对象声明按钮的 id 。\n搞Creator函数创建按钮 #  export const ProjectBudgetCreator = () =\u0026gt; { return { id: BizFormMenuButtons.ProjectBudget, render: () =\u0026gt; { return ( \u0026lt;React.Fragment\u0026gt; \u0026lt;ProjectBudgetButton key={BizFormMenuButtons.ProjectBudget} /\u0026gt; \u0026lt;/React.Fragment\u0026gt; ); }, }; }; 其中的React组件需要自己实现，主要是一个Button组件。要注意模块启用、权限。\n声明按钮 #  有了id和creator函数，就可以声明按钮了。 在 apps/link/src/solutions/biz-form/page/menu-buttons/index.tsx 文件中声明了所有menu按钮的Creator函数。你新创建的按钮也需要在这里声明。\nexport const buildInMenus = { [BizFormMenuButtons.SourcePicking]: SourcePickCreator, [BizFormMenuButtons.ImportConsumeItem]: ImportConsumeItemCreator, } 声明类型 #  相同类型的按钮会放到同一分组。 在 apps/link/src/solutions/biz-form/page/declare.ts 文件的 BizformMenuButtonType 对象中为按钮一个类型。\n把按钮放到menu中 #  class xxFormPresenter extends EasyBizFormPresenter { protected getMenuOptions(): MenuOptions { const menus = super.getMenuOptions().menus; menus.push(buildInMenus.ProjectPlan()); return menus; } } "},{"id":58,"href":"/docs/other/%E6%96%B0%E5%BB%BA%E7%A7%9F%E6%88%B7/","title":"新建开发用租户","section":"其他","content":"创建新的租户（账号）的方法如下。\n  进入运维平台（如果没账号找运维开一个），http://ops.q7link.com:8080/，找到创建租户。   选择环境，手机号搞一个能记住的，其他随便填。然后确定   大改一分钟后刷新页面，看是不是成功了。   成功以后，进入系统，用刚刚的手机号登录，密码是123456，会提示密码简单需要重置。\n  重置的话，需要手机号接收验证码。验证码可以通过gql查到。gql地址。需要把下面链接中的IP地址替换成你的环境对应的（见下一步）。\n http://172.31.50.170:9999/graphiql/index.html?query=%7B%0A%20%20VerificationCode(criteriaStr%3A%22verifyIdFlag%20in%20(%2713344445555%27)%20and%20to_char(expiredTime%2C%20%27yyyymmddhh24miss%27)%20%3E%3D%20to_char(CURRENT_TIMESTAMP%2C%20%27yyyymmddhh24miss%27)%20and%20isUsed%20%3D%20%27false%27%22)%7B%0A%20%20%20%20code%0A%20%20%20%20expiredTime%0A%20%20%20%20verifyIdFlag%0A%20%20%7D%0A%7D    这里。找到你的环境，环境会有两个IP，看哪个IP有9999这个服务，把对应的IP放到上面的链接中。   在gql中替换掉你的手机号，就可以查到验证码了。然后重置密码，进入系统就可以了。\n  "},{"id":59,"href":"/docs/common/entitycrud/","title":"脱离form对entity进行crud","section":"通用功能攻略","content":"有时我们需要新增、修改、删除一条entity的数据。但是这个entity又没有开发对应的form，无法通过表单来完成。这时就要用到EntityCRUDHelper了\nimport { EntityCRUDHelper } from \u0026#39;@root/solutions/entity-crud\u0026#39;; EntityCRUDHelper.getInstance().update(EN_BudgetAccountDocImport, data) EntityCRUDHelper提供了create/update/delete等几个方法，可以直接基于entity进行crud操作。\n   方法 参数 描述     create entityName, data 创建一条记录   update entityName, data 修改一条记录    注意事项 #  entity不能是子表。子表必须通过主表创建。\n"}]